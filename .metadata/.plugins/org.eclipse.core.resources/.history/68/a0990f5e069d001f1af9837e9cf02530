/*
 * main_control.c
 *
 *  Created on: 1 Nov 2024
 *      Author: farah
 */
#include "std_types.h"
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "twi.h"
#include "timer.h"
#include "buzzer.h"
#include "external_eeprom.h"
#include "dc_motor.h"
#include "pir.h"

#define NEW_PASS         0x01
#define DOOR_PASS_IN     0x02
#define PASS_UPDATE      0x03
#define MATCH            0x04
#define MISMATCH         0x05
#define MOTION           0x06
#define NO_MOTION        0x07
#define WARNING          0x08
#define start_address    0x0005

uint8 tick = 0;
uint8 PROGRAM= 0;
boolean status = FALSE;
boolean peopleIN = FALSE;
uint8 pass[5] = {0};
uint8 pass2[5] = {0};
uint8 i = 0;

void Timer1_handler(void)
{
	++tick;
}

int main()
{
	/********** Initializations **********/
	/* UART Initialization */
	UART_ConfigType uart_cfg = {BITS_MODE_8,NO_PARITY, STOPBIT_1BIT, 9600};
	UART_init(&uart_cfg);

	/* BUZZER Initialization */
	Buzzer_init();

	/* I2C Initialization */
	TWI_ConfigType i2c_cfg = {0x01, 2, prescaler_1};
	TWI_init(&i2c_cfg);

	/* Motor Initialization */
	DcMotor_Init();

	/* PIR Initialization */
	PIR_init();

	/* Creating timer 1 object to count time */
	sei();
	Timer_ConfigType time1 = {0, 31250, TIMER1, PRESCALER_256, CTC};
	Timer_init(&time1);
	Timer_setCallBack(Timer1_handler, TIMER1);

	/************** Program **************/
	for(;;)
	{
		PROGRAM= UART_receiveByte();
		if(PROGRAM == NEW_PASS)
		{
			/* Start Receiving New password */
			for(i = 0; i < 5; ++i)
			{
				pass[i] = UART_receiveByte();
			}
			for(i = 0; i < 5; ++i)
			{
				pass2[i] = UART_receiveByte();
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
			{
				if(pass[i] != pass2[i])
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(MISMATCH);
					break;
				}
			}
			if(i == 5)
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(MATCH);

				/* Storing new pass to the External EEPROM */
				for(i = 0; i < 5; ++i)
				{
					status = EEPROM_writeByte(start_address + i, pass[i]);
					_delay_ms(10);
				}
			}
		}
		else if(PROGRAM==DOOR_PASS_IN)
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
			{
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
			{
				if(pass[i] != pass[i + 5])
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(MISMATCH);
					break;
				}
			}
			if(i == 5)
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(MATCH);

				/* Opening Door for 15 seconds */
				DcMotor_Rotate(clockwise, 100);
				tick =0;
				while(tick < 15);

				/* Stop the Motor */
				DcMotor_Rotate(stop, 0);

				/* Checking if people still entering the door */
				do{
					peopleIN = PIR_getState();
					UART_sendByte(MOTION);
				}while(peopleIN);

				/* Closing door for 15 seconds */
				UART_sendByte(NO_MOTION);
				tick = 0;
				DcMotor_Rotate(anticlockwise, 100);
				while(tick < 15);
				DcMotor_Rotate(stop, 0);
			}
		}
		else if(PROGRAM == PASS_UPDATE)
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
			{
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
			{
				if(pass[i] != pass[i + 5])
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(MISMATCH);
					break;
				}
			}
			if(i == 5)
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(MATCH);

				/* Start Receiving New password */
				for(i = 0; i < 10; ++i)
				{
					pass[i] = UART_receiveByte();
				}

				/* Checking pass */
				for(i = 0; i < 5; ++i)
				{
					if(pass[i] != pass[i + 5])
					{
						/* Sending HMI that pass is not matched */
						UART_sendByte(MISMATCH);
						break;
					}
				}
				if(i == 5)
				{
					/* Sending HMI that pass is correct */
					UART_sendByte(MATCH);

					/* Storing new pass to the External EEPROM */
					for(i = 0; i < 5; ++i)
					{
						status = EEPROM_writeByte(start_address + i, pass[i]);
						_delay_ms(10);
					}
				}
			}
		}
		else if(PROGRAM== WARNING)
		{
			/* Turning Alarm ON */
			Buzzer_on();
			tick = 0;
			while(tick < 60);
			Buzzer_off();
		}
	}
}
