/*
 * main_control.c
 *
 *  Created on: 1 Nov 2024
 *      Author: farah
 */
/************** Includes **************/
#include "std_types.h"
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "twi.h"
#include "timer.h"
#include "buzzer.h"
#include "external_eeprom.h"
#include "dc_motor.h"
#include "pir.h"

#define PASS_LOAD        0xA0
#define PASS_IN          0xF1
#define PASS_UPDATE      0xE0
#define PASS_CORRECT     0xC0
#define PASS_FAIL        0xF0
#define PEOPLE_IN        0xB0
#define PEOPLE_NO        0xD0
#define ALARM_ON         0xF2
#define start_address    0x0005

uint8 counter = 0;
uint8 PROG_status = 0;
boolean status = FALSE;
boolean peopleIN = FALSE;
uint8 password[7]; uint8 j;
uint8 i = 0,j;

void Timer1_handler(void)
{
	++counter;
}
uint8 passwordcheck(uint8 *str)
{
	 int k;
	 UART_receiveString(str);
	         for(k=0;k<5;k++)
	         {
	        	 if(str[k]!=password[k])
	        	 {
	        		 UART_sendByte(PASS_FAIL);
	        		 return 0;
	        	 }

	         }
	         UART_sendByte(PASS_CORRECT);
	         return 1;
}
int main()
{
	/********** Initializations **********/
	/* UART Initialization */
	UART_ConfigType uart_cfg = {BITS_MODE_8,NO_PARITY,STOPBIT_1BIT, BAUDRATE_9600};
	UART_init(&uart_cfg);

	/* BUZZER Initialization */
	Buzzer_init();

	/* I2C Initialization */
	Timer_ConfigType timer1 = {0, 31250, TIMER1, PRESCALER_256,COMPARE_MATCH};
	Timer_init(&timer1);
	Timer_setCallBack(Timer1_handler, TIMER1);



	/* Motor Initialization */
	DcMotor_Init();

	/* PIR Initialization */
	PIR_init();

	/* Creating timer 1 object to count time */
	sei();
	/* I2C Initialization */
   TWI_ConfigType i2c_cfg = {0x01,2, prescaler_1};
   TWI_init(&i2c_cfg);


	/************** Program **************/
	while(1)
	{
		PROG_status = UART_receiveByte();
		if(PROG_status == PASS_LOAD)
		{
			UART_receiveString(password);

				/* Storing new pass to the External EEPROM */
			for(j=0;j<5;j++)
				{
					EEPROM_writeByte(0x0311+j,password[j]);
					_delay_ms(10);
				}
		}
		else if(PROG_status == PASS_IN)
		{
			/* Receiving password Entered by the user */
			  uint8 pass[7];
				UART_receiveString(pass);
			    i=passwordcheck(pass);
			if(i== 1)
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);

				/* Opening Door for 15 seconds */
				DcMotor_Rotate(clockwise, 100);
				counter = 0;
				while(counter < 15);

				/* Stop the Motor */
				DcMotor_Rotate(stop, 0);

				/* Checking if people still entering the door */
				do{
					peopleIN = PIR_getState();
					UART_sendByte(PEOPLE_IN);
				}while(peopleIN);

				/* Closing door for 15 seconds */
				UART_sendByte(PEOPLE_NO);
				counter = 0;
				DcMotor_Rotate(anticlockwise, 100);
				while(counter < 15);
				DcMotor_Rotate(stop, 0);
			}
			else
			{

			}
		}
		else if(PROG_status == PASS_UPDATE)
		{
			uint8 pass[7];
			UART_receiveString(pass);
		   i=passwordcheck(pass);
		   if(i== 1)
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);
			}
		   else
		   {
			   UART_sendByte(PASS_FAIL);
		   }


		}
		else if(PROG_status == ALARM_ON)
		{
			/* Turning Alarm ON */
			Buzzer_on();
			counter = 0;
			while(counter < 60);
			Buzzer_off();
		}
	}
}
