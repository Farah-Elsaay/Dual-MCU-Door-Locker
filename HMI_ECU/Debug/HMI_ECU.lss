
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  000042dc  00004370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080014e  0080014e  0000445e  2**0
                  ALLOC
  3 .stab         00003738  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001316  00000000  00000000  00007b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000915e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ada7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bc92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__vector_4>
      14:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__vector_9>
      28:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__vector_10>
      2c:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
      8a:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 21 	jmp	0x4200	; 0x4200 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description :
 * Initialises the buzzer pin direction and turn off the buzzer.
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection( BUZZER_PORT_ID, BUZZER_PIN_ID , PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID , LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description :
 * Activates the buzzer.
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID , LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description :
 * Deactivates the buzzer.
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID , LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <GPIO_setupPinDirection+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <GPIO_setupPinDirection+0x8>
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6a 83       	std	Y+2, r22	; 0x02
     baa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <GPIO_setupPinDirection+0x1c>
     bb2:	d5 c0       	rjmp	.+426    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	84 30       	cpi	r24, 0x04	; 4
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <GPIO_setupPinDirection+0x24>
     bba:	d1 c0       	rjmp	.+418    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3d 83       	std	Y+5, r19	; 0x05
     bc4:	2c 83       	std	Y+4, r18	; 0x04
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	9d 81       	ldd	r25, Y+5	; 0x05
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <GPIO_setupPinDirection+0x3a>
     bd0:	43 c0       	rjmp	.+134    	; 0xc58 <GPIO_setupPinDirection+0xc0>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	2c f4       	brge	.+10     	; 0xbe6 <GPIO_setupPinDirection+0x4e>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	71 f0       	breq	.+28     	; 0xc00 <GPIO_setupPinDirection+0x68>
     be4:	bc c0       	rjmp	.+376    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
     be6:	2c 81       	ldd	r18, Y+4	; 0x04
     be8:	3d 81       	ldd	r19, Y+5	; 0x05
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <GPIO_setupPinDirection+0x5a>
     bf0:	5f c0       	rjmp	.+190    	; 0xcb0 <GPIO_setupPinDirection+0x118>
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	9d 81       	ldd	r25, Y+5	; 0x05
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <GPIO_setupPinDirection+0x66>
     bfc:	85 c0       	rjmp	.+266    	; 0xd08 <GPIO_setupPinDirection+0x170>
     bfe:	af c0       	rjmp	.+350    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	a1 f4       	brne	.+40     	; 0xc2e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <GPIO_setupPinDirection+0x8c>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <GPIO_setupPinDirection+0x88>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	98 c0       	rjmp	.+304    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c2e:	aa e3       	ldi	r26, 0x3A	; 58
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ea e3       	ldi	r30, 0x3A	; 58
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <GPIO_setupPinDirection+0xb4>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <GPIO_setupPinDirection+0xb0>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	83 c0       	rjmp	.+262    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_setupPinDirection+0xe4>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_setupPinDirection+0xe0>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	6c c0       	rjmp	.+216    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c86:	a7 e3       	ldi	r26, 0x37	; 55
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e7 e3       	ldi	r30, 0x37	; 55
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <GPIO_setupPinDirection+0x10c>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <GPIO_setupPinDirection+0x108>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	57 c0       	rjmp	.+174    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     cb6:	a4 e3       	ldi	r26, 0x34	; 52
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e4 e3       	ldi	r30, 0x34	; 52
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setupPinDirection+0x13c>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setupPinDirection+0x138>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cde:	a4 e3       	ldi	r26, 0x34	; 52
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e3       	ldi	r30, 0x34	; 52
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_setupPinDirection+0x164>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_setupPinDirection+0x160>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	2b c0       	rjmp	.+86     	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x194>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x190>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d36:	a1 e3       	ldi	r26, 0x31	; 49
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0x1bc>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0x1b8>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <GPIO_writePin+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_writePin+0x8>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6a 83       	std	Y+2, r22	; 0x02
     d80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	08 f0       	brcs	.+2      	; 0xd8a <GPIO_writePin+0x1c>
     d88:	d5 c0       	rjmp	.+426    	; 0xf34 <GPIO_writePin+0x1c6>
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <GPIO_writePin+0x24>
     d90:	d1 c0       	rjmp	.+418    	; 0xf34 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3d 83       	std	Y+5, r19	; 0x05
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <GPIO_writePin+0x3a>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <GPIO_writePin+0xc0>
     da8:	2c 81       	ldd	r18, Y+4	; 0x04
     daa:	3d 81       	ldd	r19, Y+5	; 0x05
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <GPIO_writePin+0x4e>
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	71 f0       	breq	.+28     	; 0xdd6 <GPIO_writePin+0x68>
     dba:	bc c0       	rjmp	.+376    	; 0xf34 <GPIO_writePin+0x1c6>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <GPIO_writePin+0x5a>
     dc6:	5f c0       	rjmp	.+190    	; 0xe86 <GPIO_writePin+0x118>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <GPIO_writePin+0x66>
     dd2:	85 c0       	rjmp	.+266    	; 0xede <GPIO_writePin+0x170>
     dd4:	af c0       	rjmp	.+350    	; 0xf34 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	a1 f4       	brne	.+40     	; 0xe04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ddc:	ab e3       	ldi	r26, 0x3B	; 59
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e3       	ldi	r30, 0x3B	; 59
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <GPIO_writePin+0x8c>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <GPIO_writePin+0x88>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	98 c0       	rjmp	.+304    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e04:	ab e3       	ldi	r26, 0x3B	; 59
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	eb e3       	ldi	r30, 0x3B	; 59
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_writePin+0xb4>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_writePin+0xb0>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	83 c0       	rjmp	.+262    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	a1 f4       	brne	.+40     	; 0xe5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_writePin+0xe4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_writePin+0xe0>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	6c c0       	rjmp	.+216    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e5c:	a8 e3       	ldi	r26, 0x38	; 56
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <GPIO_writePin+0x10c>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <GPIO_writePin+0x108>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	57 c0       	rjmp	.+174    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	a1 f4       	brne	.+40     	; 0xeb4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <GPIO_writePin+0x13c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <GPIO_writePin+0x138>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	40 c0       	rjmp	.+128    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     eb4:	a5 e3       	ldi	r26, 0x35	; 53
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e3       	ldi	r30, 0x35	; 53
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_writePin+0x164>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_writePin+0x160>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	2b c0       	rjmp	.+86     	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_writePin+0x194>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_writePin+0x190>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_writePin+0x1bc>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_writePin+0x1b8>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_readPin+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_readPin+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f56:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <GPIO_readPin+0x1c>
     f5e:	84 c0       	rjmp	.+264    	; 0x1068 <GPIO_readPin+0x124>
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	08 f0       	brcs	.+2      	; 0xf68 <GPIO_readPin+0x24>
     f66:	80 c0       	rjmp	.+256    	; 0x1068 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	2c 83       	std	Y+4, r18	; 0x04
     f72:	4c 81       	ldd	r20, Y+4	; 0x04
     f74:	5d 81       	ldd	r21, Y+5	; 0x05
     f76:	41 30       	cpi	r20, 0x01	; 1
     f78:	51 05       	cpc	r21, r1
     f7a:	79 f1       	breq	.+94     	; 0xfda <GPIO_readPin+0x96>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 05       	cpc	r25, r1
     f84:	34 f4       	brge	.+12     	; 0xf92 <GPIO_readPin+0x4e>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	69 f0       	breq	.+26     	; 0xfaa <GPIO_readPin+0x66>
     f90:	6b c0       	rjmp	.+214    	; 0x1068 <GPIO_readPin+0x124>
     f92:	4c 81       	ldd	r20, Y+4	; 0x04
     f94:	5d 81       	ldd	r21, Y+5	; 0x05
     f96:	42 30       	cpi	r20, 0x02	; 2
     f98:	51 05       	cpc	r21, r1
     f9a:	b9 f1       	breq	.+110    	; 0x100a <GPIO_readPin+0xc6>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_readPin+0x64>
     fa6:	49 c0       	rjmp	.+146    	; 0x103a <GPIO_readPin+0xf6>
     fa8:	5f c0       	rjmp	.+190    	; 0x1068 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     faa:	e9 e3       	ldi	r30, 0x39	; 57
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_readPin+0x7e>
     fbe:	55 95       	asr	r21
     fc0:	47 95       	ror	r20
     fc2:	8a 95       	dec	r24
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_readPin+0x7a>
     fc6:	ca 01       	movw	r24, r20
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	88 23       	and	r24, r24
     fce:	19 f0       	breq	.+6      	; 0xfd6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	49 c0       	rjmp	.+146    	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	47 c0       	rjmp	.+142    	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     fda:	e6 e3       	ldi	r30, 0x36	; 54
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_readPin+0xae>
     fee:	55 95       	asr	r21
     ff0:	47 95       	ror	r20
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_readPin+0xaa>
     ff6:	ca 01       	movw	r24, r20
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	88 23       	and	r24, r24
     ffe:	19 f0       	breq	.+6      	; 0x1006 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	31 c0       	rjmp	.+98     	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1006:	19 82       	std	Y+1, r1	; 0x01
    1008:	2f c0       	rjmp	.+94     	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    100a:	e3 e3       	ldi	r30, 0x33	; 51
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_readPin+0xde>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_readPin+0xda>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	88 23       	and	r24, r24
    102e:	19 f0       	breq	.+6      	; 0x1036 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	19 c0       	rjmp	.+50     	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    103a:	e0 e3       	ldi	r30, 0x30	; 48
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_readPin+0x10e>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_readPin+0x10a>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	88 23       	and	r24, r24
    105e:	19 f0       	breq	.+6      	; 0x1066 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1066:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_setupPortDirection+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_setupPortDirection+0x8>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	90 f5       	brcc	.+100    	; 0x10f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <GPIO_setupPortDirection+0x5e>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <GPIO_setupPortDirection+0x3e>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f0       	breq	.+24     	; 0x10ce <GPIO_setupPortDirection+0x54>
    10b6:	1e c0       	rjmp	.+60     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <GPIO_setupPortDirection+0x68>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	81 f0       	breq	.+32     	; 0x10ec <GPIO_setupPortDirection+0x72>
    10cc:	13 c0       	rjmp	.+38     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	0e c0       	rjmp	.+28     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10e2:	e4 e3       	ldi	r30, 0x34	; 52
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10ec:	e1 e3       	ldi	r30, 0x31	; 49
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_writePort+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <GPIO_writePort+0x8>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	90 f5       	brcc	.+100    	; 0x117c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3c 83       	std	Y+4, r19	; 0x04
    1120:	2b 83       	std	Y+3, r18	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	d1 f0       	breq	.+52     	; 0x1160 <GPIO_writePort+0x5e>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <GPIO_writePort+0x3e>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	61 f0       	breq	.+24     	; 0x1156 <GPIO_writePort+0x54>
    113e:	1e c0       	rjmp	.+60     	; 0x117c <GPIO_writePort+0x7a>
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	3c 81       	ldd	r19, Y+4	; 0x04
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	81 f0       	breq	.+32     	; 0x116a <GPIO_writePort+0x68>
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	81 f0       	breq	.+32     	; 0x1174 <GPIO_writePort+0x72>
    1154:	13 c0       	rjmp	.+38     	; 0x117c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	0e c0       	rjmp	.+28     	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
    1168:	09 c0       	rjmp	.+18     	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	04 c0       	rjmp	.+8      	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
			break;
		}
	}
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_readPort+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <GPIO_readPort+0x8>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1198:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	90 f5       	brcc	.+100    	; 0x1204 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3c 83       	std	Y+4, r19	; 0x04
    11a8:	2b 83       	std	Y+3, r18	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <GPIO_readPort+0x5e>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <GPIO_readPort+0x3e>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <GPIO_readPort+0x54>
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <GPIO_readPort+0x7a>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_readPort+0x68>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <GPIO_readPort+0x72>
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    11de:	e9 e3       	ldi	r30, 0x39	; 57
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    11e8:	e6 e3       	ldi	r30, 0x36	; 54
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11f2:	e3 e3       	ldi	r30, 0x33	; 51
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11fc:	e0 e3       	ldi	r30, 0x30	; 48
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	60 97       	sbiw	r28, 0x10	; 16
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	63 e0       	ldi	r22, 0x03	; 3
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	64 e0       	ldi	r22, 0x04	; 4
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	65 e0       	ldi	r22, 0x05	; 5
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	66 e0       	ldi	r22, 0x06	; 6
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	67 e0       	ldi	r22, 0x07	; 7
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1278:	1f 86       	std	Y+15, r1	; 0x0f
    127a:	ab c0       	rjmp	.+342    	; 0x13d2 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	6f 85       	ldd	r22, Y+15	; 0x0f
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1290:	18 8a       	std	Y+16, r1	; 0x10
    1292:	22 c0       	rjmp	.+68     	; 0x12d8 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1294:	88 89       	ldd	r24, Y+16	; 0x10
    1296:	98 2f       	mov	r25, r24
    1298:	9c 5f       	subi	r25, 0xFC	; 252
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	69 2f       	mov	r22, r25
    129e:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_readPin>
    12a2:	88 23       	and	r24, r24
    12a4:	b1 f4       	brne	.+44     	; 0x12d2 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	98 2f       	mov	r25, r24
    12b6:	88 89       	ldd	r24, Y+16	; 0x10
    12b8:	89 0f       	add	r24, r25
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    12c0:	60 96       	adiw	r28, 0x10	; 16
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    12d2:	88 89       	ldd	r24, Y+16	; 0x10
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	88 8b       	std	Y+16, r24	; 0x10
    12d8:	88 89       	ldd	r24, Y+16	; 0x10
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	d8 f2       	brcs	.-74     	; 0x1294 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 ea       	ldi	r26, 0xA0	; 160
    12ee:	b0 e4       	ldi	r27, 0x40	; 64
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ad 87       	std	Y+13, r26	; 0x0d
    12f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	0f c0       	rjmp	.+30     	; 0x139a <KEYPAD_getPressedKey+0x186>
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <KEYPAD_getPressedKey+0x174>
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <KEYPAD_getPressedKey+0x168>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <KEYPAD_getPressedKey+0x1b0>
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	08 f4       	brcc	.+2      	; 0x13da <KEYPAD_getPressedKey+0x1c6>
    13d8:	51 cf       	rjmp	.-350    	; 0x127c <KEYPAD_getPressedKey+0x68>
    13da:	4e cf       	rjmp	.-356    	; 0x1278 <KEYPAD_getPressedKey+0x64>

000013dc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13ea:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1400:	70 c0       	rjmp	.+224    	; 0x14e2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	3c 81       	ldd	r19, Y+4	; 0x04
    1406:	29 30       	cpi	r18, 0x09	; 9
    1408:	31 05       	cpc	r19, r1
    140a:	5c f5       	brge	.+86     	; 0x1462 <KEYPAD_4x4_adjustKeyNumber+0x86>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1416:	59 c0       	rjmp	.+178    	; 0x14ca <KEYPAD_4x4_adjustKeyNumber+0xee>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	25 30       	cpi	r18, 0x05	; 5
    141e:	31 05       	cpc	r19, r1
    1420:	9c f4       	brge	.+38     	; 0x1448 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	91 05       	cpc	r25, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <KEYPAD_4x4_adjustKeyNumber+0x52>
    142c:	48 c0       	rjmp	.+144    	; 0x14be <KEYPAD_4x4_adjustKeyNumber+0xe2>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	23 30       	cpi	r18, 0x03	; 3
    1434:	31 05       	cpc	r19, r1
    1436:	0c f0       	brlt	.+2      	; 0x143a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1438:	45 c0       	rjmp	.+138    	; 0x14c4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1444:	39 c0       	rjmp	.+114    	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1446:	67 c0       	rjmp	.+206    	; 0x1516 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	26 30       	cpi	r18, 0x06	; 6
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1452:	41 c0       	rjmp	.+130    	; 0x14d6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	87 30       	cpi	r24, 0x07	; 7
    145a:	91 05       	cpc	r25, r1
    145c:	0c f0       	brlt	.+2      	; 0x1460 <KEYPAD_4x4_adjustKeyNumber+0x84>
    145e:	3e c0       	rjmp	.+124    	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1460:	37 c0       	rjmp	.+110    	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	2c 30       	cpi	r18, 0x0C	; 12
    1468:	31 05       	cpc	r19, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <KEYPAD_4x4_adjustKeyNumber+0x92>
    146c:	46 c0       	rjmp	.+140    	; 0x14fa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	8d 30       	cpi	r24, 0x0D	; 13
    1474:	91 05       	cpc	r25, r1
    1476:	5c f4       	brge	.+22     	; 0x148e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	2a 30       	cpi	r18, 0x0A	; 10
    147e:	31 05       	cpc	r19, r1
    1480:	b1 f1       	breq	.+108    	; 0x14ee <KEYPAD_4x4_adjustKeyNumber+0x112>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	8b 30       	cpi	r24, 0x0B	; 11
    1488:	91 05       	cpc	r25, r1
    148a:	a4 f5       	brge	.+104    	; 0x14f4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    148c:	2d c0       	rjmp	.+90     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	2e 30       	cpi	r18, 0x0E	; 14
    1494:	31 05       	cpc	r19, r1
    1496:	b9 f1       	breq	.+110    	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	8e 30       	cpi	r24, 0x0E	; 14
    149e:	91 05       	cpc	r25, r1
    14a0:	7c f1       	brlt	.+94     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x124>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	2f 30       	cpi	r18, 0x0F	; 15
    14a8:	31 05       	cpc	r19, r1
    14aa:	79 f1       	breq	.+94     	; 0x150a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	80 31       	cpi	r24, 0x10	; 16
    14b2:	91 05       	cpc	r25, r1
    14b4:	69 f1       	breq	.+90     	; 0x1510 <KEYPAD_4x4_adjustKeyNumber+0x134>
    14b6:	2f c0       	rjmp	.+94     	; 0x1516 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	2e c0       	rjmp	.+92     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    14be:	88 e0       	ldi	r24, 0x08	; 8
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	2b c0       	rjmp	.+86     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    14c4:	89 e0       	ldi	r24, 0x09	; 9
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	28 c0       	rjmp	.+80     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    14ca:	85 e2       	ldi	r24, 0x25	; 37
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	25 c0       	rjmp	.+74     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	22 c0       	rjmp	.+68     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    14d6:	85 e0       	ldi	r24, 0x05	; 5
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	1f c0       	rjmp	.+62     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	1c c0       	rjmp	.+56     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14e2:	8a e2       	ldi	r24, 0x2A	; 42
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	19 c0       	rjmp	.+50     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14fa:	8d e2       	ldi	r24, 0x2D	; 45
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1500:	8d e0       	ldi	r24, 0x0D	; 13
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	0a c0       	rjmp	.+20     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	08 c0       	rjmp	.+16     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    150a:	8d e3       	ldi	r24, 0x3D	; 61
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	05 c0       	rjmp	.+10     	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1510:	8b e2       	ldi	r24, 0x2B	; 43
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	02 c0       	rjmp	.+4      	; 0x151a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	2e 97       	sbiw	r28, 0x0e	; 14
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 ea       	ldi	r26, 0xA0	; 160
    1558:	b1 e4       	ldi	r27, 0x41	; 65
    155a:	8b 87       	std	Y+11, r24	; 0x0b
    155c:	9c 87       	std	Y+12, r25	; 0x0c
    155e:	ad 87       	std	Y+13, r26	; 0x0d
    1560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	6b 85       	ldd	r22, Y+11	; 0x0b
    1564:	7c 85       	ldd	r23, Y+12	; 0x0c
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8f 83       	std	Y+7, r24	; 0x07
    157c:	98 87       	std	Y+8, r25	; 0x08
    157e:	a9 87       	std	Y+9, r26	; 0x09
    1580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <LCD_init+0x7a>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <LCD_init+0xf8>
	else if (__tmp > 65535)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15be:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_init+0xda>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_init+0xc8>
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_init+0xbc>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_init+0x104>
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    163e:	88 e3       	ldi	r24, 0x38	; 56
    1640:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1644:	8c e0       	ldi	r24, 0x0C	; 12
    1646:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1650:	2e 96       	adiw	r28, 0x0e	; 14
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	e9 97       	sbiw	r28, 0x39	; 57
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e8       	ldi	r26, 0x80	; 128
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	8d ab       	std	Y+53, r24	; 0x35
    168c:	9e ab       	std	Y+54, r25	; 0x36
    168e:	af ab       	std	Y+55, r26	; 0x37
    1690:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6d a9       	ldd	r22, Y+53	; 0x35
    1694:	7e a9       	ldd	r23, Y+54	; 0x36
    1696:	8f a9       	ldd	r24, Y+55	; 0x37
    1698:	98 ad       	ldd	r25, Y+56	; 0x38
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	89 ab       	std	Y+49, r24	; 0x31
    16ac:	9a ab       	std	Y+50, r25	; 0x32
    16ae:	ab ab       	std	Y+51, r26	; 0x33
    16b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b2:	69 a9       	ldd	r22, Y+49	; 0x31
    16b4:	7a a9       	ldd	r23, Y+50	; 0x32
    16b6:	8b a9       	ldd	r24, Y+51	; 0x33
    16b8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_sendCommand+0x72>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16d4:	69 a9       	ldd	r22, Y+49	; 0x31
    16d6:	7a a9       	ldd	r23, Y+50	; 0x32
    16d8:	8b a9       	ldd	r24, Y+51	; 0x33
    16da:	9c a9       	ldd	r25, Y+52	; 0x34
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6d a9       	ldd	r22, Y+53	; 0x35
    16ee:	7e a9       	ldd	r23, Y+54	; 0x36
    16f0:	8f a9       	ldd	r24, Y+55	; 0x37
    16f2:	98 ad       	ldd	r25, Y+56	; 0x38
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	98 ab       	std	Y+48, r25	; 0x30
    1712:	8f a7       	std	Y+47, r24	; 0x2f
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_sendCommand+0xd2>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9e a7       	std	Y+46, r25	; 0x2e
    171c:	8d a7       	std	Y+45, r24	; 0x2d
    171e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1720:	9e a5       	ldd	r25, Y+46	; 0x2e
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_sendCommand+0xc0>
    1726:	9e a7       	std	Y+46, r25	; 0x2e
    1728:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8f a5       	ldd	r24, Y+47	; 0x2f
    172c:	98 a9       	ldd	r25, Y+48	; 0x30
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8f a5       	ldd	r24, Y+47	; 0x2f
    1736:	98 a9       	ldd	r25, Y+48	; 0x30
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_sendCommand+0xb4>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
    1752:	8f a5       	ldd	r24, Y+47	; 0x2f
    1754:	98 a9       	ldd	r25, Y+48	; 0x30
    1756:	9c a7       	std	Y+44, r25	; 0x2c
    1758:	8b a7       	std	Y+43, r24	; 0x2b
    175a:	8b a5       	ldd	r24, Y+43	; 0x2b
    175c:	9c a5       	ldd	r25, Y+44	; 0x2c
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_sendCommand+0xfc>
    1762:	9c a7       	std	Y+44, r25	; 0x2c
    1764:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e8       	ldi	r26, 0x80	; 128
    1776:	bf e3       	ldi	r27, 0x3F	; 63
    1778:	8f a3       	std	Y+39, r24	; 0x27
    177a:	98 a7       	std	Y+40, r25	; 0x28
    177c:	a9 a7       	std	Y+41, r26	; 0x29
    177e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6f a1       	ldd	r22, Y+39	; 0x27
    1782:	78 a5       	ldd	r23, Y+40	; 0x28
    1784:	89 a5       	ldd	r24, Y+41	; 0x29
    1786:	9a a5       	ldd	r25, Y+42	; 0x2a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8b a3       	std	Y+35, r24	; 0x23
    179a:	9c a3       	std	Y+36, r25	; 0x24
    179c:	ad a3       	std	Y+37, r26	; 0x25
    179e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a0:	6b a1       	ldd	r22, Y+35	; 0x23
    17a2:	7c a1       	ldd	r23, Y+36	; 0x24
    17a4:	8d a1       	ldd	r24, Y+37	; 0x25
    17a6:	9e a1       	ldd	r25, Y+38	; 0x26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_sendCommand+0x160>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17c2:	6b a1       	ldd	r22, Y+35	; 0x23
    17c4:	7c a1       	ldd	r23, Y+36	; 0x24
    17c6:	8d a1       	ldd	r24, Y+37	; 0x25
    17c8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6f a1       	ldd	r22, Y+39	; 0x27
    17dc:	78 a5       	ldd	r23, Y+40	; 0x28
    17de:	89 a5       	ldd	r24, Y+41	; 0x29
    17e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_sendCommand+0x1c0>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	98 a3       	std	Y+32, r25	; 0x20
    180a:	8f 8f       	std	Y+31, r24	; 0x1f
    180c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180e:	98 a1       	ldd	r25, Y+32	; 0x20
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_sendCommand+0x1ae>
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	89 a1       	ldd	r24, Y+33	; 0x21
    181a:	9a a1       	ldd	r25, Y+34	; 0x22
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_sendCommand+0x1a2>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6b a1       	ldd	r22, Y+35	; 0x23
    182e:	7c a1       	ldd	r23, Y+36	; 0x24
    1830:	8d a1       	ldd	r24, Y+37	; 0x25
    1832:	9e a1       	ldd	r25, Y+38	; 0x26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	9e 8f       	std	Y+30, r25	; 0x1e
    1846:	8d 8f       	std	Y+29, r24	; 0x1d
    1848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_sendCommand+0x1ea>
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	69 ad       	ldd	r22, Y+57	; 0x39
    1858:	0e 94 81 08 	call	0x1102	; 0x1102 <GPIO_writePort>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e8       	ldi	r26, 0x80	; 128
    1862:	bf e3       	ldi	r27, 0x3F	; 63
    1864:	89 8f       	std	Y+25, r24	; 0x19
    1866:	9a 8f       	std	Y+26, r25	; 0x1a
    1868:	ab 8f       	std	Y+27, r26	; 0x1b
    186a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8d 8b       	std	Y+21, r24	; 0x15
    1886:	9e 8b       	std	Y+22, r25	; 0x16
    1888:	af 8b       	std	Y+23, r26	; 0x17
    188a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <LCD_sendCommand+0x24c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	8b 8b       	std	Y+19, r24	; 0x13
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	3f ef       	ldi	r19, 0xFF	; 255
    18ba:	4f e7       	ldi	r20, 0x7F	; 127
    18bc:	57 e4       	ldi	r21, 0x47	; 71
    18be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	4c f5       	brge	.+82     	; 0x1918 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c6:	69 8d       	ldd	r22, Y+25	; 0x19
    18c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	51 e4       	ldi	r21, 0x41	; 65
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <LCD_sendCommand+0x2ac>
    18f0:	88 ec       	ldi	r24, 0xC8	; 200
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	89 8b       	std	Y+17, r24	; 0x11
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	9a 89       	ldd	r25, Y+18	; 0x12
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_sendCommand+0x29a>
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f7       	brne	.-38     	; 0x18f0 <LCD_sendCommand+0x28e>
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	98 89       	ldd	r25, Y+16	; 0x10
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_sendCommand+0x2d6>
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e8       	ldi	r26, 0x80	; 128
    1950:	bf e3       	ldi	r27, 0x3F	; 63
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_sendCommand+0x39a>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_sendCommand+0x388>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_sendCommand+0x37c>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x3c4>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a2e:	e9 96       	adiw	r28, 0x39	; 57
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	e9 97       	sbiw	r28, 0x39	; 57
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e8       	ldi	r26, 0x80	; 128
    1a66:	bf e3       	ldi	r27, 0x3F	; 63
    1a68:	8d ab       	std	Y+53, r24	; 0x35
    1a6a:	9e ab       	std	Y+54, r25	; 0x36
    1a6c:	af ab       	std	Y+55, r26	; 0x37
    1a6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	6d a9       	ldd	r22, Y+53	; 0x35
    1a72:	7e a9       	ldd	r23, Y+54	; 0x36
    1a74:	8f a9       	ldd	r24, Y+55	; 0x37
    1a76:	98 ad       	ldd	r25, Y+56	; 0x38
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	89 ab       	std	Y+49, r24	; 0x31
    1a8a:	9a ab       	std	Y+50, r25	; 0x32
    1a8c:	ab ab       	std	Y+51, r26	; 0x33
    1a8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a90:	69 a9       	ldd	r22, Y+49	; 0x31
    1a92:	7a a9       	ldd	r23, Y+50	; 0x32
    1a94:	8b a9       	ldd	r24, Y+51	; 0x33
    1a96:	9c a9       	ldd	r25, Y+52	; 0x34
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	98 ab       	std	Y+48, r25	; 0x30
    1aae:	8f a7       	std	Y+47, r24	; 0x2f
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	6d a9       	ldd	r22, Y+53	; 0x35
    1acc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ace:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_displayCharacter+0xd2>
    1af4:	88 ec       	ldi	r24, 0xC8	; 200
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	8d a7       	std	Y+45, r24	; 0x2d
    1afc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1afe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_displayCharacter+0xc0>
    1b04:	9e a7       	std	Y+46, r25	; 0x2e
    1b06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <LCD_displayCharacter+0xb4>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b32:	98 a9       	ldd	r25, Y+48	; 0x30
    1b34:	9c a7       	std	Y+44, r25	; 0x2c
    1b36:	8b a7       	std	Y+43, r24	; 0x2b
    1b38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_displayCharacter+0xfc>
    1b40:	9c a7       	std	Y+44, r25	; 0x2c
    1b42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	8f a3       	std	Y+39, r24	; 0x27
    1b58:	98 a7       	std	Y+40, r25	; 0x28
    1b5a:	a9 a7       	std	Y+41, r26	; 0x29
    1b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b60:	78 a5       	ldd	r23, Y+40	; 0x28
    1b62:	89 a5       	ldd	r24, Y+41	; 0x29
    1b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a ef       	ldi	r20, 0xFA	; 250
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8b a3       	std	Y+35, r24	; 0x23
    1b78:	9c a3       	std	Y+36, r25	; 0x24
    1b7a:	ad a3       	std	Y+37, r26	; 0x25
    1b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_displayCharacter+0x1c0>
    1be2:	88 ec       	ldi	r24, 0xC8	; 200
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bec:	98 a1       	ldd	r25, Y+32	; 0x20
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_displayCharacter+0x1ae>
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_displayCharacter+0x1a2>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a3       	std	Y+34, r25	; 0x22
    1c1c:	89 a3       	std	Y+33, r24	; 0x21
    1c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c20:	9a a1       	ldd	r25, Y+34	; 0x22
    1c22:	9e 8f       	std	Y+30, r25	; 0x1e
    1c24:	8d 8f       	std	Y+29, r24	; 0x1d
    1c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x1ea>
    1c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	69 ad       	ldd	r22, Y+57	; 0x39
    1c36:	0e 94 81 08 	call	0x1102	; 0x1102 <GPIO_writePort>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	ab 8f       	std	Y+27, r26	; 0x1b
    1c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d 8b       	std	Y+21, r24	; 0x15
    1c64:	9e 8b       	std	Y+22, r25	; 0x16
    1c66:	af 8b       	std	Y+23, r26	; 0x17
    1c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_displayCharacter+0x2ac>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_displayCharacter+0x29a>
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_displayCharacter+0x28e>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 89       	ldd	r25, Y+16	; 0x10
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_displayCharacter+0x2d6>
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	8b 87       	std	Y+11, r24	; 0x0b
    1d32:	9c 87       	std	Y+12, r25	; 0x0c
    1d34:	ad 87       	std	Y+13, r26	; 0x0d
    1d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a ef       	ldi	r20, 0xFA	; 250
    1d46:	54 e4       	ldi	r21, 0x44	; 68
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8f 83       	std	Y+7, r24	; 0x07
    1d52:	98 87       	std	Y+8, r25	; 0x08
    1d54:	a9 87       	std	Y+9, r26	; 0x09
    1d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_displayCharacter+0x39a>
    1dbc:	88 ec       	ldi	r24, 0xC8	; 200
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_displayCharacter+0x388>
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <LCD_displayCharacter+0x37c>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_displayCharacter+0x3c4>
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e0c:	e9 96       	adiw	r28, 0x39	; 57
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <LCD_displayString+0x6>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	0e c0       	rjmp	.+28     	; 0x1e4e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e2 0f       	add	r30, r18
    1e40:	f3 1f       	adc	r31, r19
    1e42:	80 81       	ld	r24, Z
    1e44:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
		i++;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 23       	and	r24, r24
    1e62:	39 f7       	brne	.-50     	; 0x1e32 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <LCD_moveCursor+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <LCD_moveCursor+0x8>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
    1e80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3d 83       	std	Y+5, r19	; 0x05
    1e8a:	2c 83       	std	Y+4, r18	; 0x04
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	c1 f0       	breq	.+48     	; 0x1ec6 <LCD_moveCursor+0x56>
    1e96:	2c 81       	ldd	r18, Y+4	; 0x04
    1e98:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_moveCursor+0x3a>
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <LCD_moveCursor+0x50>
    1ea8:	19 c0       	rjmp	.+50     	; 0x1edc <LCD_moveCursor+0x6c>
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	3d 81       	ldd	r19, Y+5	; 0x05
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	69 f0       	breq	.+26     	; 0x1ece <LCD_moveCursor+0x5e>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <LCD_moveCursor+0x66>
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	80 5c       	subi	r24, 0xC0	; 192
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	80 5f       	subi	r24, 0xF0	; 240
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	80 5b       	subi	r24, 0xB0	; 176
    1eda:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_displayStringRowColumn+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_displayStringRowColumn+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	6a 83       	std	Y+2, r22	; 0x02
    1f04:	5c 83       	std	Y+4, r21	; 0x04
    1f06:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f0c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	62 97       	sbiw	r28, 0x12	; 18
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	9a 8b       	std	Y+18, r25	; 0x12
    1f3c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f3e:	89 89       	ldd	r24, Y+17	; 0x11
    1f40:	9a 89       	ldd	r25, Y+18	; 0x12
    1f42:	9e 01       	movw	r18, r28
    1f44:	2f 5f       	subi	r18, 0xFF	; 255
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	b9 01       	movw	r22, r18
    1f4a:	4a e0       	ldi	r20, 0x0A	; 10
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	0e 94 27 21 	call	0x424e	; 0x424e <itoa>
   LCD_displayString(buff); /* Display the string */
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
}
    1f5a:	62 96       	adiw	r28, 0x12	; 18
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_sendCommand>
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <new_timer_tick>:
/*VARIABLE TO REPRESENT MOTION STATUS */
uint8 motion_status = 0;

/*CALLBACK FUNCTION*/
void new_timer_tick(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	++tick; /*INCREMENT TICKS*/
    1f88:	80 91 5b 01 	lds	r24, 0x015B
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	80 93 5b 01 	sts	0x015B, r24
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <main>:

int main()
{
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	c8 5f       	subi	r28, 0xF8	; 248
    1fa6:	d0 40       	sbci	r29, 0x00	; 0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
	/*LCD*/
	LCD_init();
    1fb2:	0e 94 95 0a 	call	0x152a	; 0x152a <LCD_init>
    /*UART*/
	UART_ConfigType UART_CONFIGURATIONS = {BITS_MODE_8,NO_PARITY, STOPBIT_1BIT, 9600};
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	8f 51       	subi	r24, 0x1F	; 31
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	c1 51       	subi	r28, 0x11	; 17
    1fbe:	df 4f       	sbci	r29, 0xFF	; 255
    1fc0:	99 83       	std	Y+1, r25	; 0x01
    1fc2:	88 83       	st	Y, r24
    1fc4:	cf 5e       	subi	r28, 0xEF	; 239
    1fc6:	d0 40       	sbci	r29, 0x00	; 0
    1fc8:	86 e4       	ldi	r24, 0x46	; 70
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	cf 50       	subi	r28, 0x0F	; 15
    1fce:	df 4f       	sbci	r29, 0xFF	; 255
    1fd0:	99 83       	std	Y+1, r25	; 0x01
    1fd2:	88 83       	st	Y, r24
    1fd4:	c1 5f       	subi	r28, 0xF1	; 241
    1fd6:	d0 40       	sbci	r29, 0x00	; 0
    1fd8:	97 e0       	ldi	r25, 0x07	; 7
    1fda:	cd 50       	subi	r28, 0x0D	; 13
    1fdc:	df 4f       	sbci	r29, 0xFF	; 255
    1fde:	98 83       	st	Y, r25
    1fe0:	c3 5f       	subi	r28, 0xF3	; 243
    1fe2:	d0 40       	sbci	r29, 0x00	; 0
    1fe4:	cf 50       	subi	r28, 0x0F	; 15
    1fe6:	df 4f       	sbci	r29, 0xFF	; 255
    1fe8:	e8 81       	ld	r30, Y
    1fea:	f9 81       	ldd	r31, Y+1	; 0x01
    1fec:	c1 5f       	subi	r28, 0xF1	; 241
    1fee:	d0 40       	sbci	r29, 0x00	; 0
    1ff0:	00 80       	ld	r0, Z
    1ff2:	cf 50       	subi	r28, 0x0F	; 15
    1ff4:	df 4f       	sbci	r29, 0xFF	; 255
    1ff6:	88 81       	ld	r24, Y
    1ff8:	99 81       	ldd	r25, Y+1	; 0x01
    1ffa:	c1 5f       	subi	r28, 0xF1	; 241
    1ffc:	d0 40       	sbci	r29, 0x00	; 0
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	cf 50       	subi	r28, 0x0F	; 15
    2002:	df 4f       	sbci	r29, 0xFF	; 255
    2004:	99 83       	std	Y+1, r25	; 0x01
    2006:	88 83       	st	Y, r24
    2008:	c1 5f       	subi	r28, 0xF1	; 241
    200a:	d0 40       	sbci	r29, 0x00	; 0
    200c:	c1 51       	subi	r28, 0x11	; 17
    200e:	df 4f       	sbci	r29, 0xFF	; 255
    2010:	e8 81       	ld	r30, Y
    2012:	f9 81       	ldd	r31, Y+1	; 0x01
    2014:	cf 5e       	subi	r28, 0xEF	; 239
    2016:	d0 40       	sbci	r29, 0x00	; 0
    2018:	00 82       	st	Z, r0
    201a:	c1 51       	subi	r28, 0x11	; 17
    201c:	df 4f       	sbci	r29, 0xFF	; 255
    201e:	88 81       	ld	r24, Y
    2020:	99 81       	ldd	r25, Y+1	; 0x01
    2022:	cf 5e       	subi	r28, 0xEF	; 239
    2024:	d0 40       	sbci	r29, 0x00	; 0
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	c1 51       	subi	r28, 0x11	; 17
    202a:	df 4f       	sbci	r29, 0xFF	; 255
    202c:	99 83       	std	Y+1, r25	; 0x01
    202e:	88 83       	st	Y, r24
    2030:	cf 5e       	subi	r28, 0xEF	; 239
    2032:	d0 40       	sbci	r29, 0x00	; 0
    2034:	cd 50       	subi	r28, 0x0D	; 13
    2036:	df 4f       	sbci	r29, 0xFF	; 255
    2038:	98 81       	ld	r25, Y
    203a:	c3 5f       	subi	r28, 0xF3	; 243
    203c:	d0 40       	sbci	r29, 0x00	; 0
    203e:	91 50       	subi	r25, 0x01	; 1
    2040:	cd 50       	subi	r28, 0x0D	; 13
    2042:	df 4f       	sbci	r29, 0xFF	; 255
    2044:	98 83       	st	Y, r25
    2046:	c3 5f       	subi	r28, 0xF3	; 243
    2048:	d0 40       	sbci	r29, 0x00	; 0
    204a:	cd 50       	subi	r28, 0x0D	; 13
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	e8 81       	ld	r30, Y
    2050:	c3 5f       	subi	r28, 0xF3	; 243
    2052:	d0 40       	sbci	r29, 0x00	; 0
    2054:	ee 23       	and	r30, r30
    2056:	31 f6       	brne	.-116    	; 0x1fe4 <main+0x4c>
	UART_init(&UART_CONFIGURATIONS);
    2058:	ce 01       	movw	r24, r28
    205a:	8f 51       	subi	r24, 0x1F	; 31
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <UART_init>
    /*TIMER*/
	/*SET INTERRUPT ENABLE*/
	sei();
    2062:	78 94       	sei
	Timer_ConfigType TIMER_CONFIGURATIONS = {0, 31250, TIMER1, PRESCALER_256, CTC};
    2064:	ce 01       	movw	r24, r28
    2066:	88 51       	subi	r24, 0x18	; 24
    2068:	9f 4f       	sbci	r25, 0xFF	; 255
    206a:	cc 50       	subi	r28, 0x0C	; 12
    206c:	df 4f       	sbci	r29, 0xFF	; 255
    206e:	99 83       	std	Y+1, r25	; 0x01
    2070:	88 83       	st	Y, r24
    2072:	c4 5f       	subi	r28, 0xF4	; 244
    2074:	d0 40       	sbci	r29, 0x00	; 0
    2076:	8f e3       	ldi	r24, 0x3F	; 63
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	ca 50       	subi	r28, 0x0A	; 10
    207c:	df 4f       	sbci	r29, 0xFF	; 255
    207e:	99 83       	std	Y+1, r25	; 0x01
    2080:	88 83       	st	Y, r24
    2082:	c6 5f       	subi	r28, 0xF6	; 246
    2084:	d0 40       	sbci	r29, 0x00	; 0
    2086:	97 e0       	ldi	r25, 0x07	; 7
    2088:	c8 50       	subi	r28, 0x08	; 8
    208a:	df 4f       	sbci	r29, 0xFF	; 255
    208c:	98 83       	st	Y, r25
    208e:	c8 5f       	subi	r28, 0xF8	; 248
    2090:	d0 40       	sbci	r29, 0x00	; 0
    2092:	ca 50       	subi	r28, 0x0A	; 10
    2094:	df 4f       	sbci	r29, 0xFF	; 255
    2096:	e8 81       	ld	r30, Y
    2098:	f9 81       	ldd	r31, Y+1	; 0x01
    209a:	c6 5f       	subi	r28, 0xF6	; 246
    209c:	d0 40       	sbci	r29, 0x00	; 0
    209e:	00 80       	ld	r0, Z
    20a0:	ca 50       	subi	r28, 0x0A	; 10
    20a2:	df 4f       	sbci	r29, 0xFF	; 255
    20a4:	88 81       	ld	r24, Y
    20a6:	99 81       	ldd	r25, Y+1	; 0x01
    20a8:	c6 5f       	subi	r28, 0xF6	; 246
    20aa:	d0 40       	sbci	r29, 0x00	; 0
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	ca 50       	subi	r28, 0x0A	; 10
    20b0:	df 4f       	sbci	r29, 0xFF	; 255
    20b2:	99 83       	std	Y+1, r25	; 0x01
    20b4:	88 83       	st	Y, r24
    20b6:	c6 5f       	subi	r28, 0xF6	; 246
    20b8:	d0 40       	sbci	r29, 0x00	; 0
    20ba:	cc 50       	subi	r28, 0x0C	; 12
    20bc:	df 4f       	sbci	r29, 0xFF	; 255
    20be:	e8 81       	ld	r30, Y
    20c0:	f9 81       	ldd	r31, Y+1	; 0x01
    20c2:	c4 5f       	subi	r28, 0xF4	; 244
    20c4:	d0 40       	sbci	r29, 0x00	; 0
    20c6:	00 82       	st	Z, r0
    20c8:	cc 50       	subi	r28, 0x0C	; 12
    20ca:	df 4f       	sbci	r29, 0xFF	; 255
    20cc:	88 81       	ld	r24, Y
    20ce:	99 81       	ldd	r25, Y+1	; 0x01
    20d0:	c4 5f       	subi	r28, 0xF4	; 244
    20d2:	d0 40       	sbci	r29, 0x00	; 0
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	cc 50       	subi	r28, 0x0C	; 12
    20d8:	df 4f       	sbci	r29, 0xFF	; 255
    20da:	99 83       	std	Y+1, r25	; 0x01
    20dc:	88 83       	st	Y, r24
    20de:	c4 5f       	subi	r28, 0xF4	; 244
    20e0:	d0 40       	sbci	r29, 0x00	; 0
    20e2:	c8 50       	subi	r28, 0x08	; 8
    20e4:	df 4f       	sbci	r29, 0xFF	; 255
    20e6:	98 81       	ld	r25, Y
    20e8:	c8 5f       	subi	r28, 0xF8	; 248
    20ea:	d0 40       	sbci	r29, 0x00	; 0
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	c8 50       	subi	r28, 0x08	; 8
    20f0:	df 4f       	sbci	r29, 0xFF	; 255
    20f2:	98 83       	st	Y, r25
    20f4:	c8 5f       	subi	r28, 0xF8	; 248
    20f6:	d0 40       	sbci	r29, 0x00	; 0
    20f8:	c8 50       	subi	r28, 0x08	; 8
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	e8 81       	ld	r30, Y
    20fe:	c8 5f       	subi	r28, 0xF8	; 248
    2100:	d0 40       	sbci	r29, 0x00	; 0
    2102:	ee 23       	and	r30, r30
    2104:	31 f6       	brne	.-116    	; 0x2092 <main+0xfa>
	Timer_init(&TIMER_CONFIGURATIONS);
    2106:	ce 01       	movw	r24, r28
    2108:	88 51       	subi	r24, 0x18	; 24
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	0e 94 65 1e 	call	0x3cca	; 0x3cca <Timer_init>
	Timer_setCallBack(new_timer_tick, TIMER1);
    2110:	80 ec       	ldi	r24, 0xC0	; 192
    2112:	9f e0       	ldi	r25, 0x0F	; 15
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <Timer_setCallBack>
    211a:	16 c4       	rjmp	.+2092   	; 0x2948 <main+0x9b0>

	/*PASSWORD FIRST TIME ENTERING*/
	while(twopasswords != MATCH)
	{
		UART_sendByte(NEW_PASS);
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
		LCD_clearScreen();
    2122:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
		/*FIRST TIME PASSWORD ENTER*/
		LCD_displayString("PLZ enter PASS");
    2126:	80 e6       	ldi	r24, 0x60	; 96
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
		LCD_moveCursor(1, 0);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
		for(i = 0; i < 5; ++i)
    2136:	10 92 58 01 	sts	0x0158, r1
    213a:	c6 c0       	rjmp	.+396    	; 0x22c8 <main+0x330>
		{
			pass[i] = KEYPAD_getPressedKey();
    213c:	80 91 58 01 	lds	r24, 0x0158
    2140:	08 2f       	mov	r16, r24
    2142:	10 e0       	ldi	r17, 0x00	; 0
    2144:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2148:	f8 01       	movw	r30, r16
    214a:	e2 5b       	subi	r30, 0xB2	; 178
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2150:	8a e2       	ldi	r24, 0x2A	; 42
    2152:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    2156:	fe 01       	movw	r30, r28
    2158:	e3 52       	subi	r30, 0x23	; 35
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	aa ef       	ldi	r26, 0xFA	; 250
    2162:	b3 e4       	ldi	r27, 0x43	; 67
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	a2 83       	std	Z+2, r26	; 0x02
    216a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	8e 01       	movw	r16, r28
    216e:	07 52       	subi	r16, 0x27	; 39
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e3 52       	subi	r30, 0x23	; 35
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219a:	fe 01       	movw	r30, r28
    219c:	e7 52       	subi	r30, 0x27	; 39
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	44 f4       	brge	.+16     	; 0x21c8 <main+0x230>
		__ticks = 1;
    21b8:	fe 01       	movw	r30, r28
    21ba:	e9 52       	subi	r30, 0x29	; 41
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	64 c0       	rjmp	.+200    	; 0x2290 <main+0x2f8>
	else if (__tmp > 65535)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e7 52       	subi	r30, 0x27	; 39
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <main+0x250>
    21e6:	43 c0       	rjmp	.+134    	; 0x226e <main+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	fe 01       	movw	r30, r28
    21ea:	e3 52       	subi	r30, 0x23	; 35
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8e 01       	movw	r16, r28
    2208:	09 52       	subi	r16, 0x29	; 41
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	f8 01       	movw	r30, r16
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	1f c0       	rjmp	.+62     	; 0x225e <main+0x2c6>
    2220:	fe 01       	movw	r30, r28
    2222:	eb 52       	subi	r30, 0x2B	; 43
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	88 ec       	ldi	r24, 0xC8	; 200
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	80 83       	st	Z, r24
    222e:	fe 01       	movw	r30, r28
    2230:	eb 52       	subi	r30, 0x2B	; 43
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <main+0x2a0>
    223c:	fe 01       	movw	r30, r28
    223e:	eb 52       	subi	r30, 0x2B	; 43
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	de 01       	movw	r26, r28
    2248:	a9 52       	subi	r26, 0x29	; 41
    224a:	bf 4f       	sbci	r27, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e9 52       	subi	r30, 0x29	; 41
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	11 96       	adiw	r26, 0x01	; 1
    225a:	9c 93       	st	X, r25
    225c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	fe 01       	movw	r30, r28
    2260:	e9 52       	subi	r30, 0x29	; 41
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	d1 f6       	brne	.-76     	; 0x2220 <main+0x288>
    226c:	28 c0       	rjmp	.+80     	; 0x22be <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	8e 01       	movw	r16, r28
    2270:	09 52       	subi	r16, 0x29	; 41
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e7 52       	subi	r30, 0x27	; 39
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	f8 01       	movw	r30, r16
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
    2290:	de 01       	movw	r26, r28
    2292:	ad 52       	subi	r26, 0x2D	; 45
    2294:	bf 4f       	sbci	r27, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	e9 52       	subi	r30, 0x29	; 41
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	11 96       	adiw	r26, 0x01	; 1
    22a2:	9c 93       	st	X, r25
    22a4:	8e 93       	st	-X, r24
    22a6:	fe 01       	movw	r30, r28
    22a8:	ed 52       	subi	r30, 0x2D	; 45
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <main+0x318>
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 52       	subi	r30, 0x2D	; 45
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
		UART_sendByte(NEW_PASS);
		LCD_clearScreen();
		/*FIRST TIME PASSWORD ENTER*/
		LCD_displayString("PLZ enter PASS");
		LCD_moveCursor(1, 0);
		for(i = 0; i < 5; ++i)
    22be:	80 91 58 01 	lds	r24, 0x0158
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	80 93 58 01 	sts	0x0158, r24
    22c8:	80 91 58 01 	lds	r24, 0x0158
    22cc:	85 30       	cpi	r24, 0x05	; 5
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <main+0x33a>
    22d0:	35 cf       	rjmp	.-406    	; 0x213c <main+0x1a4>
		{
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500); /*PRESS TIME*/
		}
		while(KEYPAD_getPressedKey() != '=');
    22d2:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    22d6:	8d 33       	cpi	r24, 0x3D	; 61
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <main+0x33a>
    22da:	fe 01       	movw	r30, r28
    22dc:	e1 53       	subi	r30, 0x31	; 49
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	aa ef       	ldi	r26, 0xFA	; 250
    22e6:	b3 e4       	ldi	r27, 0x43	; 67
    22e8:	80 83       	st	Z, r24
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	a2 83       	std	Z+2, r26	; 0x02
    22ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	8e 01       	movw	r16, r28
    22f2:	05 53       	subi	r16, 0x35	; 53
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 53       	subi	r30, 0x31	; 49
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	f8 01       	movw	r30, r16
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    231e:	fe 01       	movw	r30, r28
    2320:	e5 53       	subi	r30, 0x35	; 53
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	44 f4       	brge	.+16     	; 0x234c <main+0x3b4>
		__ticks = 1;
    233c:	fe 01       	movw	r30, r28
    233e:	e7 53       	subi	r30, 0x37	; 55
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	64 c0       	rjmp	.+200    	; 0x2414 <main+0x47c>
	else if (__tmp > 65535)
    234c:	fe 01       	movw	r30, r28
    234e:	e5 53       	subi	r30, 0x35	; 53
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	0c f0       	brlt	.+2      	; 0x236c <main+0x3d4>
    236a:	43 c0       	rjmp	.+134    	; 0x23f2 <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	fe 01       	movw	r30, r28
    236e:	e1 53       	subi	r30, 0x31	; 49
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	60 81       	ld	r22, Z
    2374:	71 81       	ldd	r23, Z+1	; 0x01
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8e 01       	movw	r16, r28
    238c:	07 53       	subi	r16, 0x37	; 55
    238e:	1f 4f       	sbci	r17, 0xFF	; 255
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	f8 01       	movw	r30, r16
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	1f c0       	rjmp	.+62     	; 0x23e2 <main+0x44a>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 53       	subi	r30, 0x39	; 57
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	fe 01       	movw	r30, r28
    23b4:	e9 53       	subi	r30, 0x39	; 57
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x424>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e9 53       	subi	r30, 0x39	; 57
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	de 01       	movw	r26, r28
    23cc:	a7 53       	subi	r26, 0x37	; 55
    23ce:	bf 4f       	sbci	r27, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e7 53       	subi	r30, 0x37	; 55
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	11 96       	adiw	r26, 0x01	; 1
    23de:	9c 93       	st	X, r25
    23e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	fe 01       	movw	r30, r28
    23e4:	e7 53       	subi	r30, 0x37	; 55
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	d1 f6       	brne	.-76     	; 0x23a4 <main+0x40c>
    23f0:	27 c0       	rjmp	.+78     	; 0x2440 <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	8e 01       	movw	r16, r28
    23f4:	07 53       	subi	r16, 0x37	; 55
    23f6:	1f 4f       	sbci	r17, 0xFF	; 255
    23f8:	fe 01       	movw	r30, r28
    23fa:	e5 53       	subi	r30, 0x35	; 53
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	f8 01       	movw	r30, r16
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	de 01       	movw	r26, r28
    2416:	ab 53       	subi	r26, 0x3B	; 59
    2418:	bf 4f       	sbci	r27, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e7 53       	subi	r30, 0x37	; 55
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	8d 93       	st	X+, r24
    2426:	9c 93       	st	X, r25
    2428:	fe 01       	movw	r30, r28
    242a:	eb 53       	subi	r30, 0x3B	; 59
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <main+0x49a>
    2436:	fe 01       	movw	r30, r28
    2438:	eb 53       	subi	r30, 0x3B	; 59
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_clearScreen();
    2440:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
		/*SECOND TIME PASSWORD ENTER*/
		LCD_displayString("PLZ RE-ENTER");
    2444:	8f e6       	ldi	r24, 0x6F	; 111
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
		LCD_moveCursor(1, 0);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
    2454:	fe 01       	movw	r30, r28
    2456:	ef 53       	subi	r30, 0x3F	; 63
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	aa ef       	ldi	r26, 0xFA	; 250
    2460:	b3 e4       	ldi	r27, 0x43	; 67
    2462:	80 83       	st	Z, r24
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	a2 83       	std	Z+2, r26	; 0x02
    2468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	8e 01       	movw	r16, r28
    246c:	03 54       	subi	r16, 0x43	; 67
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	fe 01       	movw	r30, r28
    2472:	ef 53       	subi	r30, 0x3F	; 63
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a ef       	ldi	r20, 0xFA	; 250
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	80 83       	st	Z, r24
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	a2 83       	std	Z+2, r26	; 0x02
    2496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2498:	fe 01       	movw	r30, r28
    249a:	e3 54       	subi	r30, 0x43	; 67
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	44 f4       	brge	.+16     	; 0x24c6 <main+0x52e>
		__ticks = 1;
    24b6:	fe 01       	movw	r30, r28
    24b8:	e5 54       	subi	r30, 0x45	; 69
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	80 83       	st	Z, r24
    24c4:	64 c0       	rjmp	.+200    	; 0x258e <main+0x5f6>
	else if (__tmp > 65535)
    24c6:	fe 01       	movw	r30, r28
    24c8:	e3 54       	subi	r30, 0x43	; 67
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	0c f0       	brlt	.+2      	; 0x24e6 <main+0x54e>
    24e4:	43 c0       	rjmp	.+134    	; 0x256c <main+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 53       	subi	r30, 0x3F	; 63
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8e 01       	movw	r16, r28
    2506:	05 54       	subi	r16, 0x45	; 69
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	1f c0       	rjmp	.+62     	; 0x255c <main+0x5c4>
    251e:	fe 01       	movw	r30, r28
    2520:	e7 54       	subi	r30, 0x47	; 71
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
    252c:	fe 01       	movw	r30, r28
    252e:	e7 54       	subi	r30, 0x47	; 71
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x59e>
    253a:	fe 01       	movw	r30, r28
    253c:	e7 54       	subi	r30, 0x47	; 71
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	de 01       	movw	r26, r28
    2546:	a5 54       	subi	r26, 0x45	; 69
    2548:	bf 4f       	sbci	r27, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	e5 54       	subi	r30, 0x45	; 69
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	9c 93       	st	X, r25
    255a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	fe 01       	movw	r30, r28
    255e:	e5 54       	subi	r30, 0x45	; 69
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	d1 f6       	brne	.-76     	; 0x251e <main+0x586>
    256a:	28 c0       	rjmp	.+80     	; 0x25bc <main+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	8e 01       	movw	r16, r28
    256e:	05 54       	subi	r16, 0x45	; 69
    2570:	1f 4f       	sbci	r17, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e3 54       	subi	r30, 0x43	; 67
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	de 01       	movw	r26, r28
    2590:	a9 54       	subi	r26, 0x49	; 73
    2592:	bf 4f       	sbci	r27, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e5 54       	subi	r30, 0x45	; 69
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	9c 93       	st	X, r25
    25a2:	8e 93       	st	-X, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	e9 54       	subi	r30, 0x49	; 73
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <main+0x616>
    25b2:	fe 01       	movw	r30, r28
    25b4:	e9 54       	subi	r30, 0x49	; 73
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
		_delay_ms(500);
		for(i = 0; i < 5; ++i)
    25bc:	10 92 58 01 	sts	0x0158, r1
    25c0:	c6 c0       	rjmp	.+396    	; 0x274e <main+0x7b6>
		{
			pass2[i] = KEYPAD_getPressedKey();
    25c2:	80 91 58 01 	lds	r24, 0x0158
    25c6:	08 2f       	mov	r16, r24
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    25ce:	f8 01       	movw	r30, r16
    25d0:	ed 5a       	subi	r30, 0xAD	; 173
    25d2:	fe 4f       	sbci	r31, 0xFE	; 254
    25d4:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    25d6:	8a e2       	ldi	r24, 0x2A	; 42
    25d8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    25dc:	fe 01       	movw	r30, r28
    25de:	ed 54       	subi	r30, 0x4D	; 77
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	aa ef       	ldi	r26, 0xFA	; 250
    25e8:	b3 e4       	ldi	r27, 0x43	; 67
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	8e 01       	movw	r16, r28
    25f4:	01 55       	subi	r16, 0x51	; 81
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ed 54       	subi	r30, 0x4D	; 77
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a ef       	ldi	r20, 0xFA	; 250
    260c:	54 e4       	ldi	r21, 0x44	; 68
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2620:	fe 01       	movw	r30, r28
    2622:	e1 55       	subi	r30, 0x51	; 81
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	44 f4       	brge	.+16     	; 0x264e <main+0x6b6>
		__ticks = 1;
    263e:	fe 01       	movw	r30, r28
    2640:	e3 55       	subi	r30, 0x53	; 83
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	64 c0       	rjmp	.+200    	; 0x2716 <main+0x77e>
	else if (__tmp > 65535)
    264e:	fe 01       	movw	r30, r28
    2650:	e1 55       	subi	r30, 0x51	; 81
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	0c f0       	brlt	.+2      	; 0x266e <main+0x6d6>
    266c:	43 c0       	rjmp	.+134    	; 0x26f4 <main+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	fe 01       	movw	r30, r28
    2670:	ed 54       	subi	r30, 0x4D	; 77
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8e 01       	movw	r16, r28
    268e:	03 55       	subi	r16, 0x53	; 83
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	1f c0       	rjmp	.+62     	; 0x26e4 <main+0x74c>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e5 55       	subi	r30, 0x55	; 85
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	88 ec       	ldi	r24, 0xC8	; 200
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	fe 01       	movw	r30, r28
    26b6:	e5 55       	subi	r30, 0x55	; 85
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <main+0x726>
    26c2:	fe 01       	movw	r30, r28
    26c4:	e5 55       	subi	r30, 0x55	; 85
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	de 01       	movw	r26, r28
    26ce:	a3 55       	subi	r26, 0x53	; 83
    26d0:	bf 4f       	sbci	r27, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e3 55       	subi	r30, 0x53	; 83
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	fe 01       	movw	r30, r28
    26e6:	e3 55       	subi	r30, 0x53	; 83
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	d1 f6       	brne	.-76     	; 0x26a6 <main+0x70e>
    26f2:	28 c0       	rjmp	.+80     	; 0x2744 <main+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	8e 01       	movw	r16, r28
    26f6:	03 55       	subi	r16, 0x53	; 83
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	e1 55       	subi	r30, 0x51	; 81
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	f8 01       	movw	r30, r16
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	de 01       	movw	r26, r28
    2718:	a7 55       	subi	r26, 0x57	; 87
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e3 55       	subi	r30, 0x53	; 83
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	11 96       	adiw	r26, 0x01	; 1
    2728:	9c 93       	st	X, r25
    272a:	8e 93       	st	-X, r24
    272c:	fe 01       	movw	r30, r28
    272e:	e7 55       	subi	r30, 0x57	; 87
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <main+0x79e>
    273a:	fe 01       	movw	r30, r28
    273c:	e7 55       	subi	r30, 0x57	; 87
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
		LCD_clearScreen();
		/*SECOND TIME PASSWORD ENTER*/
		LCD_displayString("PLZ RE-ENTER");
		LCD_moveCursor(1, 0);
		_delay_ms(500);
		for(i = 0; i < 5; ++i)
    2744:	80 91 58 01 	lds	r24, 0x0158
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	80 93 58 01 	sts	0x0158, r24
    274e:	80 91 58 01 	lds	r24, 0x0158
    2752:	85 30       	cpi	r24, 0x05	; 5
    2754:	08 f4       	brcc	.+2      	; 0x2758 <main+0x7c0>
    2756:	35 cf       	rjmp	.-406    	; 0x25c2 <main+0x62a>
		{
			pass2[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);/*PRESS TIME*/
		}
		while(KEYPAD_getPressedKey() != '=');
    2758:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    275c:	8d 33       	cpi	r24, 0x3D	; 61
    275e:	e1 f7       	brne	.-8      	; 0x2758 <main+0x7c0>
    2760:	fe 01       	movw	r30, r28
    2762:	eb 55       	subi	r30, 0x5B	; 91
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	aa ef       	ldi	r26, 0xFA	; 250
    276c:	b3 e4       	ldi	r27, 0x43	; 67
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	8e 01       	movw	r16, r28
    2778:	0f 55       	subi	r16, 0x5F	; 95
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	eb 55       	subi	r30, 0x5B	; 91
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a ef       	ldi	r20, 0xFA	; 250
    2790:	54 e4       	ldi	r21, 0x44	; 68
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	f8 01       	movw	r30, r16
    279c:	80 83       	st	Z, r24
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	a2 83       	std	Z+2, r26	; 0x02
    27a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a4:	fe 01       	movw	r30, r28
    27a6:	ef 55       	subi	r30, 0x5F	; 95
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	44 f4       	brge	.+16     	; 0x27d2 <main+0x83a>
		__ticks = 1;
    27c2:	fe 01       	movw	r30, r28
    27c4:	e1 56       	subi	r30, 0x61	; 97
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	64 c0       	rjmp	.+200    	; 0x289a <main+0x902>
	else if (__tmp > 65535)
    27d2:	fe 01       	movw	r30, r28
    27d4:	ef 55       	subi	r30, 0x5F	; 95
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	0c f0       	brlt	.+2      	; 0x27f2 <main+0x85a>
    27f0:	43 c0       	rjmp	.+134    	; 0x2878 <main+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 55       	subi	r30, 0x5B	; 91
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8e 01       	movw	r16, r28
    2812:	01 56       	subi	r16, 0x61	; 97
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	f8 01       	movw	r30, r16
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	1f c0       	rjmp	.+62     	; 0x2868 <main+0x8d0>
    282a:	fe 01       	movw	r30, r28
    282c:	e3 56       	subi	r30, 0x63	; 99
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	88 ec       	ldi	r24, 0xC8	; 200
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	fe 01       	movw	r30, r28
    283a:	e3 56       	subi	r30, 0x63	; 99
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <main+0x8aa>
    2846:	fe 01       	movw	r30, r28
    2848:	e3 56       	subi	r30, 0x63	; 99
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	de 01       	movw	r26, r28
    2852:	a1 56       	subi	r26, 0x61	; 97
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e1 56       	subi	r30, 0x61	; 97
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	9c 93       	st	X, r25
    2866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	fe 01       	movw	r30, r28
    286a:	e1 56       	subi	r30, 0x61	; 97
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	d1 f6       	brne	.-76     	; 0x282a <main+0x892>
    2876:	28 c0       	rjmp	.+80     	; 0x28c8 <main+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	8e 01       	movw	r16, r28
    287a:	01 56       	subi	r16, 0x61	; 97
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	ef 55       	subi	r30, 0x5F	; 95
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    289a:	de 01       	movw	r26, r28
    289c:	a5 56       	subi	r26, 0x65	; 101
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	e1 56       	subi	r30, 0x61	; 97
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	9c 93       	st	X, r25
    28ae:	8e 93       	st	-X, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 56       	subi	r30, 0x65	; 101
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <main+0x922>
    28be:	fe 01       	movw	r30, r28
    28c0:	e5 56       	subi	r30, 0x65	; 101
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
		_delay_ms(500);

		/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
		for(i = 0; i < 5; ++i)
    28c8:	10 92 58 01 	sts	0x0158, r1
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <main+0x954>
		{
			UART_sendByte(pass[i]);
    28ce:	80 91 58 01 	lds	r24, 0x0158
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	fc 01       	movw	r30, r24
    28d8:	e2 5b       	subi	r30, 0xB2	; 178
    28da:	fe 4f       	sbci	r31, 0xFE	; 254
    28dc:	80 81       	ld	r24, Z
    28de:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
		}
		while(KEYPAD_getPressedKey() != '=');
		_delay_ms(500);

		/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
		for(i = 0; i < 5; ++i)
    28e2:	80 91 58 01 	lds	r24, 0x0158
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	80 93 58 01 	sts	0x0158, r24
    28ec:	80 91 58 01 	lds	r24, 0x0158
    28f0:	85 30       	cpi	r24, 0x05	; 5
    28f2:	68 f3       	brcs	.-38     	; 0x28ce <main+0x936>
		{
			UART_sendByte(pass[i]);
		}
		for(i = 0; i < 5; ++i)
    28f4:	10 92 58 01 	sts	0x0158, r1
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <main+0x980>
		{
			UART_sendByte(pass2[i]);
    28fa:	80 91 58 01 	lds	r24, 0x0158
    28fe:	88 2f       	mov	r24, r24
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	fc 01       	movw	r30, r24
    2904:	ed 5a       	subi	r30, 0xAD	; 173
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	80 81       	ld	r24, Z
    290a:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
		/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
		for(i = 0; i < 5; ++i)
		{
			UART_sendByte(pass[i]);
		}
		for(i = 0; i < 5; ++i)
    290e:	80 91 58 01 	lds	r24, 0x0158
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	80 93 58 01 	sts	0x0158, r24
    2918:	80 91 58 01 	lds	r24, 0x0158
    291c:	85 30       	cpi	r24, 0x05	; 5
    291e:	68 f3       	brcs	.-38     	; 0x28fa <main+0x962>
		{
			UART_sendByte(pass2[i]);
		}


		twopasswords = UART_receiveByte();
    2920:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    2924:	80 93 59 01 	sts	0x0159, r24
		if(twopasswords == MISMATCH)
    2928:	80 91 59 01 	lds	r24, 0x0159
    292c:	85 30       	cpi	r24, 0x05	; 5
    292e:	61 f4       	brne	.+24     	; 0x2948 <main+0x9b0>
		{
			/*THE PROGRAM WILL REMANIN IN THE WHILE LOOP UNTIL MATCHED PASSWORD ARE ENTERED*/
			LCD_clearScreen();
    2930:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
			LCD_displayString("WRONG PASS");
    2934:	8c e7       	ldi	r24, 0x7C	; 124
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
			tick = 0;
    293c:	10 92 5b 01 	sts	0x015B, r1
			while(tick< 3);
    2940:	80 91 5b 01 	lds	r24, 0x015B
    2944:	83 30       	cpi	r24, 0x03	; 3
    2946:	e0 f3       	brcs	.-8      	; 0x2940 <main+0x9a8>
	Timer_ConfigType TIMER_CONFIGURATIONS = {0, 31250, TIMER1, PRESCALER_256, CTC};
	Timer_init(&TIMER_CONFIGURATIONS);
	Timer_setCallBack(new_timer_tick, TIMER1);

	/*PASSWORD FIRST TIME ENTERING*/
	while(twopasswords != MATCH)
    2948:	80 91 59 01 	lds	r24, 0x0159
    294c:	84 30       	cpi	r24, 0x04	; 4
    294e:	09 f0       	breq	.+2      	; 0x2952 <main+0x9ba>
    2950:	e5 cb       	rjmp	.-2102   	; 0x211c <main+0x184>


	for(;;)
	{
		/*MAIN OPTIONS*/
		LCD_clearScreen();
    2952:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
		LCD_displayString("+ : OPEN DOOR");
    2956:	87 e8       	ldi	r24, 0x87	; 135
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    295e:	25 e9       	ldi	r18, 0x95	; 149
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	a9 01       	movw	r20, r18
    2968:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>

		/* WAIT UNTIL USER CHOOSES ONE OPTION */
		do{
			key = KEYPAD_getPressedKey();
    296c:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2970:	80 93 5a 01 	sts	0x015A, r24
		}while(key != '+' && key != '-');
    2974:	80 91 5a 01 	lds	r24, 0x015A
    2978:	8b 32       	cpi	r24, 0x2B	; 43
    297a:	21 f0       	breq	.+8      	; 0x2984 <main+0x9ec>
    297c:	80 91 5a 01 	lds	r24, 0x015A
    2980:	8d 32       	cpi	r24, 0x2D	; 45
    2982:	a1 f7       	brne	.-24     	; 0x296c <main+0x9d4>


		if(key == '+')
    2984:	80 91 5a 01 	lds	r24, 0x015A
    2988:	8b 32       	cpi	r24, 0x2B	; 43
    298a:	09 f0       	breq	.+2      	; 0x298e <main+0x9f6>
    298c:	ee c2       	rjmp	.+1500   	; 0x2f6a <main+0xfd2>
		{

			UART_sendByte(DOOR_PASS_IN);
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
			LCD_clearScreen();
    2994:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
			/*ASK USER TO ENTER CURRENT PASS*/
			LCD_displayString("PLZ enter PASS");
    2998:	80 e6       	ldi	r24, 0x60	; 96
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
			LCD_moveCursor(1, 0);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 56       	subi	r30, 0x69	; 105
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	aa ef       	ldi	r26, 0xFA	; 250
    29b4:	b3 e4       	ldi	r27, 0x43	; 67
    29b6:	80 83       	st	Z, r24
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	a2 83       	std	Z+2, r26	; 0x02
    29bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	8e 01       	movw	r16, r28
    29c0:	0d 56       	subi	r16, 0x6D	; 109
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	fe 01       	movw	r30, r28
    29c6:	e9 56       	subi	r30, 0x69	; 105
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a ef       	ldi	r20, 0xFA	; 250
    29d8:	54 e4       	ldi	r21, 0x44	; 68
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	f8 01       	movw	r30, r16
    29e4:	80 83       	st	Z, r24
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	a2 83       	std	Z+2, r26	; 0x02
    29ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ec:	fe 01       	movw	r30, r28
    29ee:	ed 56       	subi	r30, 0x6D	; 109
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	44 f4       	brge	.+16     	; 0x2a1a <main+0xa82>
		__ticks = 1;
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ef 56       	subi	r30, 0x6F	; 111
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	64 c0       	rjmp	.+200    	; 0x2ae2 <main+0xb4a>
	else if (__tmp > 65535)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ed 56       	subi	r30, 0x6D	; 109
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	82 81       	ldd	r24, Z+2	; 0x02
    2a26:	93 81       	ldd	r25, Z+3	; 0x03
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	0c f0       	brlt	.+2      	; 0x2a3a <main+0xaa2>
    2a38:	43 c0       	rjmp	.+134    	; 0x2ac0 <main+0xb28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e9 56       	subi	r30, 0x69	; 105
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8e 01       	movw	r16, r28
    2a5a:	0f 56       	subi	r16, 0x6F	; 111
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	1f c0       	rjmp	.+62     	; 0x2ab0 <main+0xb18>
    2a72:	fe 01       	movw	r30, r28
    2a74:	e1 57       	subi	r30, 0x71	; 113
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	88 ec       	ldi	r24, 0xC8	; 200
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	e1 57       	subi	r30, 0x71	; 113
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <main+0xaf2>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e1 57       	subi	r30, 0x71	; 113
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	de 01       	movw	r26, r28
    2a9a:	af 56       	subi	r26, 0x6F	; 111
    2a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ef 56       	subi	r30, 0x6F	; 111
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	11 96       	adiw	r26, 0x01	; 1
    2aac:	9c 93       	st	X, r25
    2aae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ef 56       	subi	r30, 0x6F	; 111
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	d1 f6       	brne	.-76     	; 0x2a72 <main+0xada>
    2abe:	28 c0       	rjmp	.+80     	; 0x2b10 <main+0xb78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	8e 01       	movw	r16, r28
    2ac2:	0f 56       	subi	r16, 0x6F	; 111
    2ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ed 56       	subi	r30, 0x6D	; 109
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	f8 01       	movw	r30, r16
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	de 01       	movw	r26, r28
    2ae4:	a3 57       	subi	r26, 0x73	; 115
    2ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ef 56       	subi	r30, 0x6F	; 111
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	11 96       	adiw	r26, 0x01	; 1
    2af4:	9c 93       	st	X, r25
    2af6:	8e 93       	st	-X, r24
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 57       	subi	r30, 0x73	; 115
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <main+0xb6a>
    2b06:	fe 01       	movw	r30, r28
    2b08:	e3 57       	subi	r30, 0x73	; 115
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
			_delay_ms(500);
			for(i = 0; i < 5; ++i)
    2b10:	10 92 58 01 	sts	0x0158, r1
    2b14:	c6 c0       	rjmp	.+396    	; 0x2ca2 <main+0xd0a>
			{
				pass[i] = KEYPAD_getPressedKey();
    2b16:	80 91 58 01 	lds	r24, 0x0158
    2b1a:	08 2f       	mov	r16, r24
    2b1c:	10 e0       	ldi	r17, 0x00	; 0
    2b1e:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2b22:	f8 01       	movw	r30, r16
    2b24:	e2 5b       	subi	r30, 0xB2	; 178
    2b26:	fe 4f       	sbci	r31, 0xFE	; 254
    2b28:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    2b2a:	8a e2       	ldi	r24, 0x2A	; 42
    2b2c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e7 57       	subi	r30, 0x77	; 119
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	aa ef       	ldi	r26, 0xFA	; 250
    2b3c:	b3 e4       	ldi	r27, 0x43	; 67
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	0b 57       	subi	r16, 0x7B	; 123
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e7 57       	subi	r30, 0x77	; 119
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	eb 57       	subi	r30, 0x7B	; 123
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	44 f4       	brge	.+16     	; 0x2ba2 <main+0xc0a>
		__ticks = 1;
    2b92:	fe 01       	movw	r30, r28
    2b94:	ed 57       	subi	r30, 0x7D	; 125
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	64 c0       	rjmp	.+200    	; 0x2c6a <main+0xcd2>
	else if (__tmp > 65535)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 57       	subi	r30, 0x7B	; 123
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <main+0xc2a>
    2bc0:	43 c0       	rjmp	.+134    	; 0x2c48 <main+0xcb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 57       	subi	r30, 0x77	; 119
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8e 01       	movw	r16, r28
    2be2:	0d 57       	subi	r16, 0x7D	; 125
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	1f c0       	rjmp	.+62     	; 0x2c38 <main+0xca0>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ef 57       	subi	r30, 0x7F	; 127
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ef 57       	subi	r30, 0x7F	; 127
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <main+0xc7a>
    2c16:	fe 01       	movw	r30, r28
    2c18:	ef 57       	subi	r30, 0x7F	; 127
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	de 01       	movw	r26, r28
    2c22:	ad 57       	subi	r26, 0x7D	; 125
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	ed 57       	subi	r30, 0x7D	; 125
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	9c 93       	st	X, r25
    2c36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ed 57       	subi	r30, 0x7D	; 125
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	d1 f6       	brne	.-76     	; 0x2bfa <main+0xc62>
    2c46:	28 c0       	rjmp	.+80     	; 0x2c98 <main+0xd00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	8e 01       	movw	r16, r28
    2c4a:	0d 57       	subi	r16, 0x7D	; 125
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	eb 57       	subi	r30, 0x7B	; 123
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	de 01       	movw	r26, r28
    2c6c:	a1 58       	subi	r26, 0x81	; 129
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	ed 57       	subi	r30, 0x7D	; 125
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	9c 93       	st	X, r25
    2c7e:	8e 93       	st	-X, r24
    2c80:	fe 01       	movw	r30, r28
    2c82:	e1 58       	subi	r30, 0x81	; 129
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <main+0xcf2>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e1 58       	subi	r30, 0x81	; 129
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
			LCD_clearScreen();
			/*ASK USER TO ENTER CURRENT PASS*/
			LCD_displayString("PLZ enter PASS");
			LCD_moveCursor(1, 0);
			_delay_ms(500);
			for(i = 0; i < 5; ++i)
    2c98:	80 91 58 01 	lds	r24, 0x0158
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	80 93 58 01 	sts	0x0158, r24
    2ca2:	80 91 58 01 	lds	r24, 0x0158
    2ca6:	85 30       	cpi	r24, 0x05	; 5
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <main+0xd14>
    2caa:	35 cf       	rjmp	.-406    	; 0x2b16 <main+0xb7e>
			{
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != '=');
    2cac:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2cb0:	8d 33       	cpi	r24, 0x3D	; 61
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <main+0xd14>
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e5 58       	subi	r30, 0x85	; 133
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	aa ef       	ldi	r26, 0xFA	; 250
    2cc0:	b3 e4       	ldi	r27, 0x43	; 67
    2cc2:	80 83       	st	Z, r24
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	a2 83       	std	Z+2, r26	; 0x02
    2cc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	8e 01       	movw	r16, r28
    2ccc:	09 58       	subi	r16, 0x89	; 137
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 58       	subi	r30, 0x85	; 133
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a ef       	ldi	r20, 0xFA	; 250
    2ce4:	54 e4       	ldi	r21, 0x44	; 68
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	f8 01       	movw	r30, r16
    2cf0:	80 83       	st	Z, r24
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	a2 83       	std	Z+2, r26	; 0x02
    2cf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e9 58       	subi	r30, 0x89	; 137
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	93 81       	ldd	r25, Z+3	; 0x03
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	44 f4       	brge	.+16     	; 0x2d26 <main+0xd8e>
		__ticks = 1;
    2d16:	fe 01       	movw	r30, r28
    2d18:	eb 58       	subi	r30, 0x8B	; 139
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	64 c0       	rjmp	.+200    	; 0x2dee <main+0xe56>
	else if (__tmp > 65535)
    2d26:	fe 01       	movw	r30, r28
    2d28:	e9 58       	subi	r30, 0x89	; 137
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	4f e7       	ldi	r20, 0x7F	; 127
    2d3a:	57 e4       	ldi	r21, 0x47	; 71
    2d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	0c f0       	brlt	.+2      	; 0x2d46 <main+0xdae>
    2d44:	43 c0       	rjmp	.+134    	; 0x2dcc <main+0xe34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	fe 01       	movw	r30, r28
    2d48:	e5 58       	subi	r30, 0x85	; 133
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e2       	ldi	r20, 0x20	; 32
    2d5a:	51 e4       	ldi	r21, 0x41	; 65
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	8e 01       	movw	r16, r28
    2d66:	0b 58       	subi	r16, 0x8B	; 139
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	f8 01       	movw	r30, r16
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	1f c0       	rjmp	.+62     	; 0x2dbc <main+0xe24>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ed 58       	subi	r30, 0x8D	; 141
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	80 83       	st	Z, r24
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ed 58       	subi	r30, 0x8D	; 141
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <main+0xdfe>
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ed 58       	subi	r30, 0x8D	; 141
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	de 01       	movw	r26, r28
    2da6:	ab 58       	subi	r26, 0x8B	; 139
    2da8:	bf 4f       	sbci	r27, 0xFF	; 255
    2daa:	fe 01       	movw	r30, r28
    2dac:	eb 58       	subi	r30, 0x8B	; 139
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 81       	ld	r24, Z
    2db2:	91 81       	ldd	r25, Z+1	; 0x01
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	11 96       	adiw	r26, 0x01	; 1
    2db8:	9c 93       	st	X, r25
    2dba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	eb 58       	subi	r30, 0x8B	; 139
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	d1 f6       	brne	.-76     	; 0x2d7e <main+0xde6>
    2dca:	28 c0       	rjmp	.+80     	; 0x2e1c <main+0xe84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dcc:	8e 01       	movw	r16, r28
    2dce:	0b 58       	subi	r16, 0x8B	; 139
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e9 58       	subi	r30, 0x89	; 137
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	f8 01       	movw	r30, r16
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	de 01       	movw	r26, r28
    2df0:	af 58       	subi	r26, 0x8F	; 143
    2df2:	bf 4f       	sbci	r27, 0xFF	; 255
    2df4:	fe 01       	movw	r30, r28
    2df6:	eb 58       	subi	r30, 0x8B	; 139
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	9c 93       	st	X, r25
    2e02:	8e 93       	st	-X, r24
    2e04:	fe 01       	movw	r30, r28
    2e06:	ef 58       	subi	r30, 0x8F	; 143
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <main+0xe76>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ef 58       	subi	r30, 0x8F	; 143
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
			_delay_ms(500);

			/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
			for(i = 0; i < 5; ++i)
    2e1c:	10 92 58 01 	sts	0x0158, r1
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <main+0xea8>
			{
				UART_sendByte(pass[i]);
    2e22:	80 91 58 01 	lds	r24, 0x0158
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	e2 5b       	subi	r30, 0xB2	; 178
    2e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e30:	80 81       	ld	r24, Z
    2e32:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
			}
			while(KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
			for(i = 0; i < 5; ++i)
    2e36:	80 91 58 01 	lds	r24, 0x0158
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	80 93 58 01 	sts	0x0158, r24
    2e40:	80 91 58 01 	lds	r24, 0x0158
    2e44:	85 30       	cpi	r24, 0x05	; 5
    2e46:	68 f3       	brcs	.-38     	; 0x2e22 <main+0xe8a>
			{
				UART_sendByte(pass[i]);
			}

			/* Checking pass */
			twopasswords = UART_receiveByte();
    2e48:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    2e4c:	80 93 59 01 	sts	0x0159, r24
			if(twopasswords == MATCH)
    2e50:	80 91 59 01 	lds	r24, 0x0159
    2e54:	84 30       	cpi	r24, 0x04	; 4
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <main+0xec2>
    2e58:	4a c0       	rjmp	.+148    	; 0x2eee <main+0xf56>
			{
				pass_enter_door_fails = 0;
    2e5a:	10 92 5c 01 	sts	0x015C, r1
				/*OPEN DOOR CLOCKWISE FOR 15 SECONDS*/
				LCD_clearScreen();
    2e5e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    2e62:	25 ea       	ldi	r18, 0xA5	; 165
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	a9 01       	movw	r20, r18
    2e6c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 3, "Please Wait");
    2e70:	24 eb       	ldi	r18, 0xB4	; 180
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	63 e0       	ldi	r22, 0x03	; 3
    2e78:	a9 01       	movw	r20, r18
    2e7a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
				tick = 0;
    2e7e:	10 92 5b 01 	sts	0x015B, r1
				while(tick < 15);
    2e82:	80 91 5b 01 	lds	r24, 0x015B
    2e86:	8f 30       	cpi	r24, 0x0F	; 15
    2e88:	e0 f3       	brcs	.-8      	; 0x2e82 <main+0xeea>

				/*CHECK MOTION STATUS*/
				LCD_clearScreen();
    2e8a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
				motion_status = UART_receiveByte();
    2e8e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    2e92:	80 93 5e 01 	sts	0x015E, r24
    2e96:	12 c0       	rjmp	.+36     	; 0x2ebc <main+0xf24>
				while(motion_status == MOTION)
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
    2e98:	20 ec       	ldi	r18, 0xC0	; 192
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	a9 01       	movw	r20, r18
    2ea2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 3, "to Enter");
    2ea6:	20 ed       	ldi	r18, 0xD0	; 208
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	63 e0       	ldi	r22, 0x03	; 3
    2eae:	a9 01       	movw	r20, r18
    2eb0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					motion_status = UART_receiveByte();
    2eb4:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    2eb8:	80 93 5e 01 	sts	0x015E, r24
				while(tick < 15);

				/*CHECK MOTION STATUS*/
				LCD_clearScreen();
				motion_status = UART_receiveByte();
				while(motion_status == MOTION)
    2ebc:	80 91 5e 01 	lds	r24, 0x015E
    2ec0:	86 30       	cpi	r24, 0x06	; 6
    2ec2:	51 f3       	breq	.-44     	; 0x2e98 <main+0xf00>
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
					LCD_displayStringRowColumn(1, 3, "to Enter");
					motion_status = UART_receiveByte();
				}
				if(motion_status == NO_MOTION)
    2ec4:	80 91 5e 01 	lds	r24, 0x015E
    2ec8:	87 30       	cpi	r24, 0x07	; 7
    2eca:	09 f0       	breq	.+2      	; 0x2ece <main+0xf36>
    2ecc:	42 cd       	rjmp	.-1404   	; 0x2952 <main+0x9ba>
				{
					/*CLOSE DOOR ANTICLOCKWISE FOR 15 SECONDS*/
					LCD_clearScreen();
    2ece:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 2, "Door Locking");
    2ed2:	29 ed       	ldi	r18, 0xD9	; 217
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	62 e0       	ldi	r22, 0x02	; 2
    2eda:	a9 01       	movw	r20, r18
    2edc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					tick = 0;
    2ee0:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 15);
    2ee4:	80 91 5b 01 	lds	r24, 0x015B
    2ee8:	8f 30       	cpi	r24, 0x0F	; 15
    2eea:	e0 f3       	brcs	.-8      	; 0x2ee4 <main+0xf4c>
    2eec:	32 cd       	rjmp	.-1436   	; 0x2952 <main+0x9ba>
				}
			}
			else if(twopasswords == MISMATCH)
    2eee:	80 91 59 01 	lds	r24, 0x0159
    2ef2:	85 30       	cpi	r24, 0x05	; 5
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <main+0xf60>
    2ef6:	2d cd       	rjmp	.-1446   	; 0x2952 <main+0x9ba>
			{
				++pass_enter_door_fails;
    2ef8:	80 91 5c 01 	lds	r24, 0x015C
    2efc:	8f 5f       	subi	r24, 0xFF	; 255
    2efe:	80 93 5c 01 	sts	0x015C, r24
				if(pass_enter_door_fails == 3) /*WARNING*/
    2f02:	80 91 5c 01 	lds	r24, 0x015C
    2f06:	83 30       	cpi	r24, 0x03	; 3
    2f08:	e1 f4       	brne	.+56     	; 0x2f42 <main+0xfaa>
				{
					/*LOCK SYSTEM 1 MINUTE*/
					UART_sendByte(WARNING);
    2f0a:	88 e0       	ldi	r24, 0x08	; 8
    2f0c:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
					LCD_clearScreen();
    2f10:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "SYSTEM LOCKED");
    2f14:	26 ee       	ldi	r18, 0xE6	; 230
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	a9 01       	movw	r20, r18
    2f1e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    2f22:	24 ef       	ldi	r18, 0xF4	; 244
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	a9 01       	movw	r20, r18
    2f2c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					tick = 0;
    2f30:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 60);
    2f34:	80 91 5b 01 	lds	r24, 0x015B
    2f38:	8c 33       	cpi	r24, 0x3C	; 60
    2f3a:	e0 f3       	brcs	.-8      	; 0x2f34 <main+0xf9c>
					pass_enter_door_fails = 0;
    2f3c:	10 92 5c 01 	sts	0x015C, r1
    2f40:	08 cd       	rjmp	.-1520   	; 0x2952 <main+0x9ba>
				}
				else
				{
					LCD_clearScreen();
    2f42:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayString("FAILED");
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	91 e0       	ldi	r25, 0x01	; 1
    2f4a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
			        LCD_displayStringRowColumn(1,0, "NOT MATCHED");
    2f4e:	2a e0       	ldi	r18, 0x0A	; 10
    2f50:	31 e0       	ldi	r19, 0x01	; 1
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	60 e0       	ldi	r22, 0x00	; 0
    2f56:	a9 01       	movw	r20, r18
    2f58:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					tick= 0;
    2f5c:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 3);
    2f60:	80 91 5b 01 	lds	r24, 0x015B
    2f64:	83 30       	cpi	r24, 0x03	; 3
    2f66:	e0 f3       	brcs	.-8      	; 0x2f60 <main+0xfc8>
    2f68:	f4 cc       	rjmp	.-1560   	; 0x2952 <main+0x9ba>
				}
			}
		}
		else if(key == '-')
    2f6a:	80 91 5a 01 	lds	r24, 0x015A
    2f6e:	8d 32       	cpi	r24, 0x2D	; 45
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <main+0xfdc>
    2f72:	ef cc       	rjmp	.-1570   	; 0x2952 <main+0x9ba>
		{
			UART_sendByte(PASS_UPDATE);
    2f74:	83 e0       	ldi	r24, 0x03	; 3
    2f76:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
			LCD_clearScreen();
    2f7a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
			/*ASK USER TO ENTER CURRENT PASSWORD*/
			LCD_displayString("PLZ enter PASS");
    2f7e:	80 e6       	ldi	r24, 0x60	; 96
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
			LCD_moveCursor(1, 0);
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e3 59       	subi	r30, 0x93	; 147
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	aa ef       	ldi	r26, 0xFA	; 250
    2f9a:	b3 e4       	ldi	r27, 0x43	; 67
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	a2 83       	std	Z+2, r26	; 0x02
    2fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	8e 01       	movw	r16, r28
    2fa6:	07 59       	subi	r16, 0x97	; 151
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	fe 01       	movw	r30, r28
    2fac:	e3 59       	subi	r30, 0x93	; 147
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	4a ef       	ldi	r20, 0xFA	; 250
    2fbe:	54 e4       	ldi	r21, 0x44	; 68
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	f8 01       	movw	r30, r16
    2fca:	80 83       	st	Z, r24
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	a2 83       	std	Z+2, r26	; 0x02
    2fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e7 59       	subi	r30, 0x97	; 151
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e8       	ldi	r20, 0x80	; 128
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	44 f4       	brge	.+16     	; 0x3000 <main+0x1068>
		__ticks = 1;
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e9 59       	subi	r30, 0x99	; 153
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    2ffe:	64 c0       	rjmp	.+200    	; 0x30c8 <main+0x1130>
	else if (__tmp > 65535)
    3000:	fe 01       	movw	r30, r28
    3002:	e7 59       	subi	r30, 0x97	; 151
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	0c f0       	brlt	.+2      	; 0x3020 <main+0x1088>
    301e:	43 c0       	rjmp	.+134    	; 0x30a6 <main+0x110e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3020:	fe 01       	movw	r30, r28
    3022:	e3 59       	subi	r30, 0x93	; 147
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e2       	ldi	r20, 0x20	; 32
    3034:	51 e4       	ldi	r21, 0x41	; 65
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8e 01       	movw	r16, r28
    3040:	09 59       	subi	r16, 0x99	; 153
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	f8 01       	movw	r30, r16
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	80 83       	st	Z, r24
    3056:	1f c0       	rjmp	.+62     	; 0x3096 <main+0x10fe>
    3058:	fe 01       	movw	r30, r28
    305a:	eb 59       	subi	r30, 0x9B	; 155
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	88 ec       	ldi	r24, 0xC8	; 200
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	fe 01       	movw	r30, r28
    3068:	eb 59       	subi	r30, 0x9B	; 155
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 81       	ld	r24, Z
    306e:	91 81       	ldd	r25, Z+1	; 0x01
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <main+0x10d8>
    3074:	fe 01       	movw	r30, r28
    3076:	eb 59       	subi	r30, 0x9B	; 155
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307e:	de 01       	movw	r26, r28
    3080:	a9 59       	subi	r26, 0x99	; 153
    3082:	bf 4f       	sbci	r27, 0xFF	; 255
    3084:	fe 01       	movw	r30, r28
    3086:	e9 59       	subi	r30, 0x99	; 153
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	9c 93       	st	X, r25
    3094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	fe 01       	movw	r30, r28
    3098:	e9 59       	subi	r30, 0x99	; 153
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	d1 f6       	brne	.-76     	; 0x3058 <main+0x10c0>
    30a4:	28 c0       	rjmp	.+80     	; 0x30f6 <main+0x115e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	8e 01       	movw	r16, r28
    30a8:	09 59       	subi	r16, 0x99	; 153
    30aa:	1f 4f       	sbci	r17, 0xFF	; 255
    30ac:	fe 01       	movw	r30, r28
    30ae:	e7 59       	subi	r30, 0x97	; 151
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	f8 01       	movw	r30, r16
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
    30c8:	de 01       	movw	r26, r28
    30ca:	ad 59       	subi	r26, 0x9D	; 157
    30cc:	bf 4f       	sbci	r27, 0xFF	; 255
    30ce:	fe 01       	movw	r30, r28
    30d0:	e9 59       	subi	r30, 0x99	; 153
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	9c 93       	st	X, r25
    30dc:	8e 93       	st	-X, r24
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 59       	subi	r30, 0x9D	; 157
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <main+0x1150>
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 59       	subi	r30, 0x9D	; 157
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
			_delay_ms(500);
			for(i = 0; i < 5; ++i)
    30f6:	10 92 58 01 	sts	0x0158, r1
    30fa:	c6 c0       	rjmp	.+396    	; 0x3288 <main+0x12f0>
			{
				pass[i] = KEYPAD_getPressedKey();
    30fc:	80 91 58 01 	lds	r24, 0x0158
    3100:	08 2f       	mov	r16, r24
    3102:	10 e0       	ldi	r17, 0x00	; 0
    3104:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    3108:	f8 01       	movw	r30, r16
    310a:	e2 5b       	subi	r30, 0xB2	; 178
    310c:	fe 4f       	sbci	r31, 0xFE	; 254
    310e:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    3110:	8a e2       	ldi	r24, 0x2A	; 42
    3112:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    3116:	fe 01       	movw	r30, r28
    3118:	e1 5a       	subi	r30, 0xA1	; 161
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	aa ef       	ldi	r26, 0xFA	; 250
    3122:	b3 e4       	ldi	r27, 0x43	; 67
    3124:	80 83       	st	Z, r24
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	a2 83       	std	Z+2, r26	; 0x02
    312a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	8e 01       	movw	r16, r28
    312e:	05 5a       	subi	r16, 0xA5	; 165
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
    3132:	fe 01       	movw	r30, r28
    3134:	e1 5a       	subi	r30, 0xA1	; 161
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a ef       	ldi	r20, 0xFA	; 250
    3146:	54 e4       	ldi	r21, 0x44	; 68
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	f8 01       	movw	r30, r16
    3152:	80 83       	st	Z, r24
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    315a:	fe 01       	movw	r30, r28
    315c:	e5 5a       	subi	r30, 0xA5	; 165
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	44 f4       	brge	.+16     	; 0x3188 <main+0x11f0>
		__ticks = 1;
    3178:	fe 01       	movw	r30, r28
    317a:	e7 5a       	subi	r30, 0xA7	; 167
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	64 c0       	rjmp	.+200    	; 0x3250 <main+0x12b8>
	else if (__tmp > 65535)
    3188:	fe 01       	movw	r30, r28
    318a:	e5 5a       	subi	r30, 0xA5	; 165
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	0c f0       	brlt	.+2      	; 0x31a8 <main+0x1210>
    31a6:	43 c0       	rjmp	.+134    	; 0x322e <main+0x1296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	fe 01       	movw	r30, r28
    31aa:	e1 5a       	subi	r30, 0xA1	; 161
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	8e 01       	movw	r16, r28
    31c8:	07 5a       	subi	r16, 0xA7	; 167
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	f8 01       	movw	r30, r16
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	1f c0       	rjmp	.+62     	; 0x321e <main+0x1286>
    31e0:	fe 01       	movw	r30, r28
    31e2:	e9 5a       	subi	r30, 0xA9	; 169
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	88 ec       	ldi	r24, 0xC8	; 200
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	fe 01       	movw	r30, r28
    31f0:	e9 5a       	subi	r30, 0xA9	; 169
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <main+0x1260>
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 5a       	subi	r30, 0xA9	; 169
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	de 01       	movw	r26, r28
    3208:	a7 5a       	subi	r26, 0xA7	; 167
    320a:	bf 4f       	sbci	r27, 0xFF	; 255
    320c:	fe 01       	movw	r30, r28
    320e:	e7 5a       	subi	r30, 0xA7	; 167
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	11 96       	adiw	r26, 0x01	; 1
    321a:	9c 93       	st	X, r25
    321c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	fe 01       	movw	r30, r28
    3220:	e7 5a       	subi	r30, 0xA7	; 167
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	d1 f6       	brne	.-76     	; 0x31e0 <main+0x1248>
    322c:	28 c0       	rjmp	.+80     	; 0x327e <main+0x12e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	8e 01       	movw	r16, r28
    3230:	07 5a       	subi	r16, 0xA7	; 167
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	e5 5a       	subi	r30, 0xA5	; 165
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	60 81       	ld	r22, Z
    323c:	71 81       	ldd	r23, Z+1	; 0x01
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	de 01       	movw	r26, r28
    3252:	ab 5a       	subi	r26, 0xAB	; 171
    3254:	bf 4f       	sbci	r27, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	e7 5a       	subi	r30, 0xA7	; 167
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	11 96       	adiw	r26, 0x01	; 1
    3262:	9c 93       	st	X, r25
    3264:	8e 93       	st	-X, r24
    3266:	fe 01       	movw	r30, r28
    3268:	eb 5a       	subi	r30, 0xAB	; 171
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <main+0x12d8>
    3274:	fe 01       	movw	r30, r28
    3276:	eb 5a       	subi	r30, 0xAB	; 171
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
			LCD_clearScreen();
			/*ASK USER TO ENTER CURRENT PASSWORD*/
			LCD_displayString("PLZ enter PASS");
			LCD_moveCursor(1, 0);
			_delay_ms(500);
			for(i = 0; i < 5; ++i)
    327e:	80 91 58 01 	lds	r24, 0x0158
    3282:	8f 5f       	subi	r24, 0xFF	; 255
    3284:	80 93 58 01 	sts	0x0158, r24
    3288:	80 91 58 01 	lds	r24, 0x0158
    328c:	85 30       	cpi	r24, 0x05	; 5
    328e:	08 f4       	brcc	.+2      	; 0x3292 <main+0x12fa>
    3290:	35 cf       	rjmp	.-406    	; 0x30fc <main+0x1164>
			{
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != '=');
    3292:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    3296:	8d 33       	cpi	r24, 0x3D	; 61
    3298:	e1 f7       	brne	.-8      	; 0x3292 <main+0x12fa>
    329a:	fe 01       	movw	r30, r28
    329c:	ef 5a       	subi	r30, 0xAF	; 175
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	aa ef       	ldi	r26, 0xFA	; 250
    32a6:	b3 e4       	ldi	r27, 0x43	; 67
    32a8:	80 83       	st	Z, r24
    32aa:	91 83       	std	Z+1, r25	; 0x01
    32ac:	a2 83       	std	Z+2, r26	; 0x02
    32ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	8e 01       	movw	r16, r28
    32b2:	03 5b       	subi	r16, 0xB3	; 179
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	fe 01       	movw	r30, r28
    32b8:	ef 5a       	subi	r30, 0xAF	; 175
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a ef       	ldi	r20, 0xFA	; 250
    32ca:	54 e4       	ldi	r21, 0x44	; 68
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	f8 01       	movw	r30, r16
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	a2 83       	std	Z+2, r26	; 0x02
    32dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32de:	fe 01       	movw	r30, r28
    32e0:	e3 5b       	subi	r30, 0xB3	; 179
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	44 f4       	brge	.+16     	; 0x330c <main+0x1374>
		__ticks = 1;
    32fc:	fe 01       	movw	r30, r28
    32fe:	e5 5b       	subi	r30, 0xB5	; 181
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    330a:	64 c0       	rjmp	.+200    	; 0x33d4 <main+0x143c>
	else if (__tmp > 65535)
    330c:	fe 01       	movw	r30, r28
    330e:	e3 5b       	subi	r30, 0xB3	; 179
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	3f ef       	ldi	r19, 0xFF	; 255
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	57 e4       	ldi	r21, 0x47	; 71
    3322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	0c f0       	brlt	.+2      	; 0x332c <main+0x1394>
    332a:	43 c0       	rjmp	.+134    	; 0x33b2 <main+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332c:	fe 01       	movw	r30, r28
    332e:	ef 5a       	subi	r30, 0xAF	; 175
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8e 01       	movw	r16, r28
    334c:	05 5b       	subi	r16, 0xB5	; 181
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	f8 01       	movw	r30, r16
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	1f c0       	rjmp	.+62     	; 0x33a2 <main+0x140a>
    3364:	fe 01       	movw	r30, r28
    3366:	e7 5b       	subi	r30, 0xB7	; 183
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
    3372:	fe 01       	movw	r30, r28
    3374:	e7 5b       	subi	r30, 0xB7	; 183
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <main+0x13e4>
    3380:	fe 01       	movw	r30, r28
    3382:	e7 5b       	subi	r30, 0xB7	; 183
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338a:	de 01       	movw	r26, r28
    338c:	a5 5b       	subi	r26, 0xB5	; 181
    338e:	bf 4f       	sbci	r27, 0xFF	; 255
    3390:	fe 01       	movw	r30, r28
    3392:	e5 5b       	subi	r30, 0xB5	; 181
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	91 81       	ldd	r25, Z+1	; 0x01
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	9c 93       	st	X, r25
    33a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e5 5b       	subi	r30, 0xB5	; 181
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	d1 f6       	brne	.-76     	; 0x3364 <main+0x13cc>
    33b0:	28 c0       	rjmp	.+80     	; 0x3402 <main+0x146a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	8e 01       	movw	r16, r28
    33b4:	05 5b       	subi	r16, 0xB5	; 181
    33b6:	1f 4f       	sbci	r17, 0xFF	; 255
    33b8:	fe 01       	movw	r30, r28
    33ba:	e3 5b       	subi	r30, 0xB3	; 179
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	f8 01       	movw	r30, r16
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	de 01       	movw	r26, r28
    33d6:	a9 5b       	subi	r26, 0xB9	; 185
    33d8:	bf 4f       	sbci	r27, 0xFF	; 255
    33da:	fe 01       	movw	r30, r28
    33dc:	e5 5b       	subi	r30, 0xB5	; 181
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	11 96       	adiw	r26, 0x01	; 1
    33e6:	9c 93       	st	X, r25
    33e8:	8e 93       	st	-X, r24
    33ea:	fe 01       	movw	r30, r28
    33ec:	e9 5b       	subi	r30, 0xB9	; 185
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <main+0x145c>
    33f8:	fe 01       	movw	r30, r28
    33fa:	e9 5b       	subi	r30, 0xB9	; 185
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
			_delay_ms(500);

			/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
			for(i = 0; i < 5; ++i)
    3402:	10 92 58 01 	sts	0x0158, r1
    3406:	0f c0       	rjmp	.+30     	; 0x3426 <main+0x148e>
			{
				UART_sendByte(pass[i]);
    3408:	80 91 58 01 	lds	r24, 0x0158
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	fc 01       	movw	r30, r24
    3412:	e2 5b       	subi	r30, 0xB2	; 178
    3414:	fe 4f       	sbci	r31, 0xFE	; 254
    3416:	80 81       	ld	r24, Z
    3418:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
			}
			while(KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
			for(i = 0; i < 5; ++i)
    341c:	80 91 58 01 	lds	r24, 0x0158
    3420:	8f 5f       	subi	r24, 0xFF	; 255
    3422:	80 93 58 01 	sts	0x0158, r24
    3426:	80 91 58 01 	lds	r24, 0x0158
    342a:	85 30       	cpi	r24, 0x05	; 5
    342c:	68 f3       	brcs	.-38     	; 0x3408 <main+0x1470>
			{
				UART_sendByte(pass[i]);
			}


			twopasswords = UART_receiveByte();
    342e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    3432:	80 93 59 01 	sts	0x0159, r24
			if(twopasswords == MATCH)
    3436:	80 91 59 01 	lds	r24, 0x0159
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	09 f0       	breq	.+2      	; 0x3440 <main+0x14a8>
    343e:	dc c2       	rjmp	.+1464   	; 0x39f8 <main+0x1a60>
			{
				/*UPDATE PASSWORD*/
				pass_update_fails = 0;
    3440:	10 92 5d 01 	sts	0x015D, r1
				LCD_clearScreen();
    3444:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
				/*ASK USER TO ENTER NEW PASS*/
				LCD_displayString("PLZ enter NEW");
    3448:	86 e1       	ldi	r24, 0x16	; 22
    344a:	91 e0       	ldi	r25, 0x01	; 1
    344c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "PASS");
    3450:	24 e2       	ldi	r18, 0x24	; 36
    3452:	31 e0       	ldi	r19, 0x01	; 1
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	a9 01       	movw	r20, r18
    345a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
				LCD_moveCursor(1,6);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	66 e0       	ldi	r22, 0x06	; 6
    3462:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>

				for(i = 0; i < 5; ++i)
    3466:	10 92 58 01 	sts	0x0158, r1
    346a:	97 c0       	rjmp	.+302    	; 0x359a <main+0x1602>
				{
					pass[i] = KEYPAD_getPressedKey();
    346c:	80 91 58 01 	lds	r24, 0x0158
    3470:	08 2f       	mov	r16, r24
    3472:	10 e0       	ldi	r17, 0x00	; 0
    3474:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    3478:	f8 01       	movw	r30, r16
    347a:	e2 5b       	subi	r30, 0xB2	; 178
    347c:	fe 4f       	sbci	r31, 0xFE	; 254
    347e:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    3480:	8a e2       	ldi	r24, 0x2A	; 42
    3482:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    3486:	fe 01       	movw	r30, r28
    3488:	ed 5b       	subi	r30, 0xBD	; 189
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	aa ef       	ldi	r26, 0xFA	; 250
    3492:	b3 e4       	ldi	r27, 0x43	; 67
    3494:	80 83       	st	Z, r24
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	a2 83       	std	Z+2, r26	; 0x02
    349a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349c:	8e 01       	movw	r16, r28
    349e:	01 5c       	subi	r16, 0xC1	; 193
    34a0:	1f 4f       	sbci	r17, 0xFF	; 255
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 5b       	subi	r30, 0xBD	; 189
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a ef       	ldi	r20, 0xFA	; 250
    34b6:	54 e4       	ldi	r21, 0x44	; 68
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	f8 01       	movw	r30, r16
    34c2:	80 83       	st	Z, r24
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	a2 83       	std	Z+2, r26	; 0x02
    34c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ca:	fe 01       	movw	r30, r28
    34cc:	ff 96       	adiw	r30, 0x3f	; 63
    34ce:	60 81       	ld	r22, Z
    34d0:	71 81       	ldd	r23, Z+1	; 0x01
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e8       	ldi	r20, 0x80	; 128
    34dc:	5f e3       	ldi	r21, 0x3F	; 63
    34de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34e2:	88 23       	and	r24, r24
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <main+0x1558>
		__ticks = 1;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	9e af       	std	Y+62, r25	; 0x3e
    34ec:	8d af       	std	Y+61, r24	; 0x3d
    34ee:	46 c0       	rjmp	.+140    	; 0x357c <main+0x15e4>
	else if (__tmp > 65535)
    34f0:	fe 01       	movw	r30, r28
    34f2:	ff 96       	adiw	r30, 0x3f	; 63
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	64 f5       	brge	.+88     	; 0x3564 <main+0x15cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	fe 01       	movw	r30, r28
    350e:	ed 5b       	subi	r30, 0xBD	; 189
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9e af       	std	Y+62, r25	; 0x3e
    3538:	8d af       	std	Y+61, r24	; 0x3d
    353a:	0f c0       	rjmp	.+30     	; 0x355a <main+0x15c2>
    353c:	88 ec       	ldi	r24, 0xC8	; 200
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9c af       	std	Y+60, r25	; 0x3c
    3542:	8b af       	std	Y+59, r24	; 0x3b
    3544:	8b ad       	ldd	r24, Y+59	; 0x3b
    3546:	9c ad       	ldd	r25, Y+60	; 0x3c
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <main+0x15b0>
    354c:	9c af       	std	Y+60, r25	; 0x3c
    354e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3550:	8d ad       	ldd	r24, Y+61	; 0x3d
    3552:	9e ad       	ldd	r25, Y+62	; 0x3e
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	9e af       	std	Y+62, r25	; 0x3e
    3558:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	8d ad       	ldd	r24, Y+61	; 0x3d
    355c:	9e ad       	ldd	r25, Y+62	; 0x3e
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f7       	brne	.-38     	; 0x353c <main+0x15a4>
    3562:	16 c0       	rjmp	.+44     	; 0x3590 <main+0x15f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	fe 01       	movw	r30, r28
    3566:	ff 96       	adiw	r30, 0x3f	; 63
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	9e af       	std	Y+62, r25	; 0x3e
    357a:	8d af       	std	Y+61, r24	; 0x3d
    357c:	8d ad       	ldd	r24, Y+61	; 0x3d
    357e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3580:	9a af       	std	Y+58, r25	; 0x3a
    3582:	89 af       	std	Y+57, r24	; 0x39
    3584:	89 ad       	ldd	r24, Y+57	; 0x39
    3586:	9a ad       	ldd	r25, Y+58	; 0x3a
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <main+0x15f0>
    358c:	9a af       	std	Y+58, r25	; 0x3a
    358e:	89 af       	std	Y+57, r24	; 0x39
				/*ASK USER TO ENTER NEW PASS*/
				LCD_displayString("PLZ enter NEW");
				LCD_displayStringRowColumn(1, 0, "PASS");
				LCD_moveCursor(1,6);

				for(i = 0; i < 5; ++i)
    3590:	80 91 58 01 	lds	r24, 0x0158
    3594:	8f 5f       	subi	r24, 0xFF	; 255
    3596:	80 93 58 01 	sts	0x0158, r24
    359a:	80 91 58 01 	lds	r24, 0x0158
    359e:	85 30       	cpi	r24, 0x05	; 5
    35a0:	08 f4       	brcc	.+2      	; 0x35a4 <main+0x160c>
    35a2:	64 cf       	rjmp	.-312    	; 0x346c <main+0x14d4>
				{
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while(KEYPAD_getPressedKey() != '=');
    35a4:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    35a8:	8d 33       	cpi	r24, 0x3D	; 61
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <main+0x160c>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	aa ef       	ldi	r26, 0xFA	; 250
    35b2:	b3 e4       	ldi	r27, 0x43	; 67
    35b4:	8d ab       	std	Y+53, r24	; 0x35
    35b6:	9e ab       	std	Y+54, r25	; 0x36
    35b8:	af ab       	std	Y+55, r26	; 0x37
    35ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	6d a9       	ldd	r22, Y+53	; 0x35
    35be:	7e a9       	ldd	r23, Y+54	; 0x36
    35c0:	8f a9       	ldd	r24, Y+55	; 0x37
    35c2:	98 ad       	ldd	r25, Y+56	; 0x38
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a ef       	ldi	r20, 0xFA	; 250
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	89 ab       	std	Y+49, r24	; 0x31
    35d6:	9a ab       	std	Y+50, r25	; 0x32
    35d8:	ab ab       	std	Y+51, r26	; 0x33
    35da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35dc:	69 a9       	ldd	r22, Y+49	; 0x31
    35de:	7a a9       	ldd	r23, Y+50	; 0x32
    35e0:	8b a9       	ldd	r24, Y+51	; 0x33
    35e2:	9c a9       	ldd	r25, Y+52	; 0x34
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <main+0x1666>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	98 ab       	std	Y+48, r25	; 0x30
    35fa:	8f a7       	std	Y+47, r24	; 0x2f
    35fc:	3f c0       	rjmp	.+126    	; 0x367c <main+0x16e4>
	else if (__tmp > 65535)
    35fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3600:	7a a9       	ldd	r23, Y+50	; 0x32
    3602:	8b a9       	ldd	r24, Y+51	; 0x33
    3604:	9c a9       	ldd	r25, Y+52	; 0x34
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	4c f5       	brge	.+82     	; 0x3668 <main+0x16d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3616:	6d a9       	ldd	r22, Y+53	; 0x35
    3618:	7e a9       	ldd	r23, Y+54	; 0x36
    361a:	8f a9       	ldd	r24, Y+55	; 0x37
    361c:	98 ad       	ldd	r25, Y+56	; 0x38
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	51 e4       	ldi	r21, 0x41	; 65
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	98 ab       	std	Y+48, r25	; 0x30
    363c:	8f a7       	std	Y+47, r24	; 0x2f
    363e:	0f c0       	rjmp	.+30     	; 0x365e <main+0x16c6>
    3640:	88 ec       	ldi	r24, 0xC8	; 200
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9e a7       	std	Y+46, r25	; 0x2e
    3646:	8d a7       	std	Y+45, r24	; 0x2d
    3648:	8d a5       	ldd	r24, Y+45	; 0x2d
    364a:	9e a5       	ldd	r25, Y+46	; 0x2e
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <main+0x16b4>
    3650:	9e a7       	std	Y+46, r25	; 0x2e
    3652:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	8f a5       	ldd	r24, Y+47	; 0x2f
    3656:	98 a9       	ldd	r25, Y+48	; 0x30
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	98 ab       	std	Y+48, r25	; 0x30
    365c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3660:	98 a9       	ldd	r25, Y+48	; 0x30
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	69 f7       	brne	.-38     	; 0x3640 <main+0x16a8>
    3666:	14 c0       	rjmp	.+40     	; 0x3690 <main+0x16f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3668:	69 a9       	ldd	r22, Y+49	; 0x31
    366a:	7a a9       	ldd	r23, Y+50	; 0x32
    366c:	8b a9       	ldd	r24, Y+51	; 0x33
    366e:	9c a9       	ldd	r25, Y+52	; 0x34
    3670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	98 ab       	std	Y+48, r25	; 0x30
    367a:	8f a7       	std	Y+47, r24	; 0x2f
    367c:	8f a5       	ldd	r24, Y+47	; 0x2f
    367e:	98 a9       	ldd	r25, Y+48	; 0x30
    3680:	9c a7       	std	Y+44, r25	; 0x2c
    3682:	8b a7       	std	Y+43, r24	; 0x2b
    3684:	8b a5       	ldd	r24, Y+43	; 0x2b
    3686:	9c a5       	ldd	r25, Y+44	; 0x2c
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <main+0x16f0>
    368c:	9c a7       	std	Y+44, r25	; 0x2c
    368e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_clearScreen();
    3690:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
				/*ASK USER TO ENTER NEW PASS SECOND TIME TO CHECK IF THEY ARE MATCHED OR NOT */
				LCD_displayString("PLZ RE-ENTER");
    3694:	8f e6       	ldi	r24, 0x6F	; 111
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
				LCD_moveCursor(1, 0);
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_moveCursor>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	aa ef       	ldi	r26, 0xFA	; 250
    36aa:	b3 e4       	ldi	r27, 0x43	; 67
    36ac:	8f a3       	std	Y+39, r24	; 0x27
    36ae:	98 a7       	std	Y+40, r25	; 0x28
    36b0:	a9 a7       	std	Y+41, r26	; 0x29
    36b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	6f a1       	ldd	r22, Y+39	; 0x27
    36b6:	78 a5       	ldd	r23, Y+40	; 0x28
    36b8:	89 a5       	ldd	r24, Y+41	; 0x29
    36ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	4a ef       	ldi	r20, 0xFA	; 250
    36c2:	54 e4       	ldi	r21, 0x44	; 68
    36c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	8b a3       	std	Y+35, r24	; 0x23
    36ce:	9c a3       	std	Y+36, r25	; 0x24
    36d0:	ad a3       	std	Y+37, r26	; 0x25
    36d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36d4:	6b a1       	ldd	r22, Y+35	; 0x23
    36d6:	7c a1       	ldd	r23, Y+36	; 0x24
    36d8:	8d a1       	ldd	r24, Y+37	; 0x25
    36da:	9e a1       	ldd	r25, Y+38	; 0x26
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e8       	ldi	r20, 0x80	; 128
    36e2:	5f e3       	ldi	r21, 0x3F	; 63
    36e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	2c f4       	brge	.+10     	; 0x36f6 <main+0x175e>
		__ticks = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9a a3       	std	Y+34, r25	; 0x22
    36f2:	89 a3       	std	Y+33, r24	; 0x21
    36f4:	3f c0       	rjmp	.+126    	; 0x3774 <main+0x17dc>
	else if (__tmp > 65535)
    36f6:	6b a1       	ldd	r22, Y+35	; 0x23
    36f8:	7c a1       	ldd	r23, Y+36	; 0x24
    36fa:	8d a1       	ldd	r24, Y+37	; 0x25
    36fc:	9e a1       	ldd	r25, Y+38	; 0x26
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	3f ef       	ldi	r19, 0xFF	; 255
    3702:	4f e7       	ldi	r20, 0x7F	; 127
    3704:	57 e4       	ldi	r21, 0x47	; 71
    3706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    370a:	18 16       	cp	r1, r24
    370c:	4c f5       	brge	.+82     	; 0x3760 <main+0x17c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370e:	6f a1       	ldd	r22, Y+39	; 0x27
    3710:	78 a5       	ldd	r23, Y+40	; 0x28
    3712:	89 a5       	ldd	r24, Y+41	; 0x29
    3714:	9a a5       	ldd	r25, Y+42	; 0x2a
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e2       	ldi	r20, 0x20	; 32
    371c:	51 e4       	ldi	r21, 0x41	; 65
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	bc 01       	movw	r22, r24
    3728:	cd 01       	movw	r24, r26
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9a a3       	std	Y+34, r25	; 0x22
    3734:	89 a3       	std	Y+33, r24	; 0x21
    3736:	0f c0       	rjmp	.+30     	; 0x3756 <main+0x17be>
    3738:	88 ec       	ldi	r24, 0xC8	; 200
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	98 a3       	std	Y+32, r25	; 0x20
    373e:	8f 8f       	std	Y+31, r24	; 0x1f
    3740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3742:	98 a1       	ldd	r25, Y+32	; 0x20
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <main+0x17ac>
    3748:	98 a3       	std	Y+32, r25	; 0x20
    374a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374c:	89 a1       	ldd	r24, Y+33	; 0x21
    374e:	9a a1       	ldd	r25, Y+34	; 0x22
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	9a a3       	std	Y+34, r25	; 0x22
    3754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3756:	89 a1       	ldd	r24, Y+33	; 0x21
    3758:	9a a1       	ldd	r25, Y+34	; 0x22
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	69 f7       	brne	.-38     	; 0x3738 <main+0x17a0>
    375e:	14 c0       	rjmp	.+40     	; 0x3788 <main+0x17f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3760:	6b a1       	ldd	r22, Y+35	; 0x23
    3762:	7c a1       	ldd	r23, Y+36	; 0x24
    3764:	8d a1       	ldd	r24, Y+37	; 0x25
    3766:	9e a1       	ldd	r25, Y+38	; 0x26
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9a a3       	std	Y+34, r25	; 0x22
    3772:	89 a3       	std	Y+33, r24	; 0x21
    3774:	89 a1       	ldd	r24, Y+33	; 0x21
    3776:	9a a1       	ldd	r25, Y+34	; 0x22
    3778:	9e 8f       	std	Y+30, r25	; 0x1e
    377a:	8d 8f       	std	Y+29, r24	; 0x1d
    377c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    377e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <main+0x17e8>
    3784:	9e 8f       	std	Y+30, r25	; 0x1e
    3786:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				for(i = 5; i < 10; ++i)
    3788:	85 e0       	ldi	r24, 0x05	; 5
    378a:	80 93 58 01 	sts	0x0158, r24
    378e:	84 c0       	rjmp	.+264    	; 0x3898 <main+0x1900>
				{
					pass[i] = KEYPAD_getPressedKey();
    3790:	80 91 58 01 	lds	r24, 0x0158
    3794:	08 2f       	mov	r16, r24
    3796:	10 e0       	ldi	r17, 0x00	; 0
    3798:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    379c:	f8 01       	movw	r30, r16
    379e:	e2 5b       	subi	r30, 0xB2	; 178
    37a0:	fe 4f       	sbci	r31, 0xFE	; 254
    37a2:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    37a4:	8a e2       	ldi	r24, 0x2A	; 42
    37a6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_displayCharacter>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	aa ef       	ldi	r26, 0xFA	; 250
    37b0:	b3 e4       	ldi	r27, 0x43	; 67
    37b2:	89 8f       	std	Y+25, r24	; 0x19
    37b4:	9a 8f       	std	Y+26, r25	; 0x1a
    37b6:	ab 8f       	std	Y+27, r26	; 0x1b
    37b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	69 8d       	ldd	r22, Y+25	; 0x19
    37bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8d 8b       	std	Y+21, r24	; 0x15
    37d4:	9e 8b       	std	Y+22, r25	; 0x16
    37d6:	af 8b       	std	Y+23, r26	; 0x17
    37d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37da:	6d 89       	ldd	r22, Y+21	; 0x15
    37dc:	7e 89       	ldd	r23, Y+22	; 0x16
    37de:	8f 89       	ldd	r24, Y+23	; 0x17
    37e0:	98 8d       	ldd	r25, Y+24	; 0x18
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <main+0x1864>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9c 8b       	std	Y+20, r25	; 0x14
    37f8:	8b 8b       	std	Y+19, r24	; 0x13
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <main+0x18e2>
	else if (__tmp > 65535)
    37fc:	6d 89       	ldd	r22, Y+21	; 0x15
    37fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3800:	8f 89       	ldd	r24, Y+23	; 0x17
    3802:	98 8d       	ldd	r25, Y+24	; 0x18
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <main+0x18ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	69 8d       	ldd	r22, Y+25	; 0x19
    3816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    381a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9c 8b       	std	Y+20, r25	; 0x14
    383a:	8b 8b       	std	Y+19, r24	; 0x13
    383c:	0f c0       	rjmp	.+30     	; 0x385c <main+0x18c4>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9a 8b       	std	Y+18, r25	; 0x12
    3844:	89 8b       	std	Y+17, r24	; 0x11
    3846:	89 89       	ldd	r24, Y+17	; 0x11
    3848:	9a 89       	ldd	r25, Y+18	; 0x12
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <main+0x18b2>
    384e:	9a 8b       	std	Y+18, r25	; 0x12
    3850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	9c 89       	ldd	r25, Y+20	; 0x14
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	9c 8b       	std	Y+20, r25	; 0x14
    385a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <main+0x18a6>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <main+0x18f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	6d 89       	ldd	r22, Y+21	; 0x15
    3868:	7e 89       	ldd	r23, Y+22	; 0x16
    386a:	8f 89       	ldd	r24, Y+23	; 0x17
    386c:	98 8d       	ldd	r25, Y+24	; 0x18
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9c 8b       	std	Y+20, r25	; 0x14
    3878:	8b 8b       	std	Y+19, r24	; 0x13
    387a:	8b 89       	ldd	r24, Y+19	; 0x13
    387c:	9c 89       	ldd	r25, Y+20	; 0x14
    387e:	98 8b       	std	Y+16, r25	; 0x10
    3880:	8f 87       	std	Y+15, r24	; 0x0f
    3882:	8f 85       	ldd	r24, Y+15	; 0x0f
    3884:	98 89       	ldd	r25, Y+16	; 0x10
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <main+0x18ee>
    388a:	98 8b       	std	Y+16, r25	; 0x10
    388c:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_clearScreen();
				/*ASK USER TO ENTER NEW PASS SECOND TIME TO CHECK IF THEY ARE MATCHED OR NOT */
				LCD_displayString("PLZ RE-ENTER");
				LCD_moveCursor(1, 0);
				_delay_ms(500);
				for(i = 5; i < 10; ++i)
    388e:	80 91 58 01 	lds	r24, 0x0158
    3892:	8f 5f       	subi	r24, 0xFF	; 255
    3894:	80 93 58 01 	sts	0x0158, r24
    3898:	80 91 58 01 	lds	r24, 0x0158
    389c:	8a 30       	cpi	r24, 0x0A	; 10
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <main+0x190a>
    38a0:	77 cf       	rjmp	.-274    	; 0x3790 <main+0x17f8>
				{
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while(KEYPAD_getPressedKey() != '=');
    38a2:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    38a6:	8d 33       	cpi	r24, 0x3D	; 61
    38a8:	e1 f7       	brne	.-8      	; 0x38a2 <main+0x190a>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	aa ef       	ldi	r26, 0xFA	; 250
    38b0:	b3 e4       	ldi	r27, 0x43	; 67
    38b2:	8b 87       	std	Y+11, r24	; 0x0b
    38b4:	9c 87       	std	Y+12, r25	; 0x0c
    38b6:	ad 87       	std	Y+13, r26	; 0x0d
    38b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    38bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38be:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	4a ef       	ldi	r20, 0xFA	; 250
    38c8:	54 e4       	ldi	r21, 0x44	; 68
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	8f 83       	std	Y+7, r24	; 0x07
    38d4:	98 87       	std	Y+8, r25	; 0x08
    38d6:	a9 87       	std	Y+9, r26	; 0x09
    38d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38da:	6f 81       	ldd	r22, Y+7	; 0x07
    38dc:	78 85       	ldd	r23, Y+8	; 0x08
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5f e3       	ldi	r21, 0x3F	; 63
    38ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ee:	88 23       	and	r24, r24
    38f0:	2c f4       	brge	.+10     	; 0x38fc <main+0x1964>
		__ticks = 1;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
    38fa:	3f c0       	rjmp	.+126    	; 0x397a <main+0x19e2>
	else if (__tmp > 65535)
    38fc:	6f 81       	ldd	r22, Y+7	; 0x07
    38fe:	78 85       	ldd	r23, Y+8	; 0x08
    3900:	89 85       	ldd	r24, Y+9	; 0x09
    3902:	9a 85       	ldd	r25, Y+10	; 0x0a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	3f ef       	ldi	r19, 0xFF	; 255
    3908:	4f e7       	ldi	r20, 0x7F	; 127
    390a:	57 e4       	ldi	r21, 0x47	; 71
    390c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3910:	18 16       	cp	r1, r24
    3912:	4c f5       	brge	.+82     	; 0x3966 <main+0x19ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3914:	6b 85       	ldd	r22, Y+11	; 0x0b
    3916:	7c 85       	ldd	r23, Y+12	; 0x0c
    3918:	8d 85       	ldd	r24, Y+13	; 0x0d
    391a:	9e 85       	ldd	r25, Y+14	; 0x0e
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e2       	ldi	r20, 0x20	; 32
    3922:	51 e4       	ldi	r21, 0x41	; 65
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	0f c0       	rjmp	.+30     	; 0x395c <main+0x19c4>
    393e:	88 ec       	ldi	r24, 0xC8	; 200
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	9c 83       	std	Y+4, r25	; 0x04
    3944:	8b 83       	std	Y+3, r24	; 0x03
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	9c 81       	ldd	r25, Y+4	; 0x04
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <main+0x19b2>
    394e:	9c 83       	std	Y+4, r25	; 0x04
    3950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3952:	8d 81       	ldd	r24, Y+5	; 0x05
    3954:	9e 81       	ldd	r25, Y+6	; 0x06
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	69 f7       	brne	.-38     	; 0x393e <main+0x19a6>
    3964:	14 c0       	rjmp	.+40     	; 0x398e <main+0x19f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3966:	6f 81       	ldd	r22, Y+7	; 0x07
    3968:	78 85       	ldd	r23, Y+8	; 0x08
    396a:	89 85       	ldd	r24, Y+9	; 0x09
    396c:	9a 85       	ldd	r25, Y+10	; 0x0a
    396e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	8d 83       	std	Y+5, r24	; 0x05
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	89 83       	std	Y+1, r24	; 0x01
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <main+0x19ee>
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);

				/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
				for(i = 0; i < 10; ++i)
    398e:	10 92 58 01 	sts	0x0158, r1
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <main+0x1a1a>
				{
					UART_sendByte(pass[i]);
    3994:	80 91 58 01 	lds	r24, 0x0158
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	fc 01       	movw	r30, r24
    399e:	e2 5b       	subi	r30, 0xB2	; 178
    39a0:	fe 4f       	sbci	r31, 0xFE	; 254
    39a2:	80 81       	ld	r24, Z
    39a4:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
				}
				while(KEYPAD_getPressedKey() != '=');
				_delay_ms(500);

				/* SENDING PASSWORD TO CONTROL ECU TO CHECK IF THEY ARE MATCHED OR NOT*/
				for(i = 0; i < 10; ++i)
    39a8:	80 91 58 01 	lds	r24, 0x0158
    39ac:	8f 5f       	subi	r24, 0xFF	; 255
    39ae:	80 93 58 01 	sts	0x0158, r24
    39b2:	80 91 58 01 	lds	r24, 0x0158
    39b6:	8a 30       	cpi	r24, 0x0A	; 10
    39b8:	68 f3       	brcs	.-38     	; 0x3994 <main+0x19fc>
				{
					UART_sendByte(pass[i]);
				}

				twopasswords= UART_receiveByte();
    39ba:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    39be:	80 93 59 01 	sts	0x0159, r24
				if(twopasswords == MISMATCH)
    39c2:	80 91 59 01 	lds	r24, 0x0159
    39c6:	85 30       	cpi	r24, 0x05	; 5
    39c8:	11 f0       	breq	.+4      	; 0x39ce <main+0x1a36>
    39ca:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x9ba>
				{
					LCD_clearScreen();
    39ce:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayString("FAILED");
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	91 e0       	ldi	r25, 0x01	; 1
    39d6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
					LCD_displayStringRowColumn(1,0, "NOT MATCHED");
    39da:	2a e0       	ldi	r18, 0x0A	; 10
    39dc:	31 e0       	ldi	r19, 0x01	; 1
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	a9 01       	movw	r20, r18
    39e4:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					tick = 0;
    39e8:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 3);
    39ec:	80 91 5b 01 	lds	r24, 0x015B
    39f0:	83 30       	cpi	r24, 0x03	; 3
    39f2:	e0 f3       	brcs	.-8      	; 0x39ec <main+0x1a54>
    39f4:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x9ba>
				}
			}
			else if(twopasswords ==MISMATCH)
    39f8:	80 91 59 01 	lds	r24, 0x0159
    39fc:	85 30       	cpi	r24, 0x05	; 5
    39fe:	11 f0       	breq	.+4      	; 0x3a04 <main+0x1a6c>
    3a00:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x9ba>
			{
				++pass_update_fails;
    3a04:	80 91 5d 01 	lds	r24, 0x015D
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	80 93 5d 01 	sts	0x015D, r24
				if(pass_update_fails == 3) /*WARNING*/
    3a0e:	80 91 5d 01 	lds	r24, 0x015D
    3a12:	83 30       	cpi	r24, 0x03	; 3
    3a14:	d1 f4       	brne	.+52     	; 0x3a4a <main+0x1ab2>
				{
					/* Lock system for 1 minute */
					LCD_clearScreen();
    3a16:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    3a1a:	29 e2       	ldi	r18, 0x29	; 41
    3a1c:	31 e0       	ldi	r19, 0x01	; 1
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	61 e0       	ldi	r22, 0x01	; 1
    3a22:	a9 01       	movw	r20, r18
    3a24:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    3a28:	24 ef       	ldi	r18, 0xF4	; 244
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	a9 01       	movw	r20, r18
    3a32:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_displayStringRowColumn>
					tick = 0;
    3a36:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 60);
    3a3a:	80 91 5b 01 	lds	r24, 0x015B
    3a3e:	8c 33       	cpi	r24, 0x3C	; 60
    3a40:	e0 f3       	brcs	.-8      	; 0x3a3a <main+0x1aa2>
					pass_update_fails = 0;
    3a42:	10 92 5d 01 	sts	0x015D, r1
    3a46:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x9ba>
				}
				else
				{
					LCD_clearScreen();
    3a4a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_clearScreen>
					LCD_displayString("WRONG PASS");
    3a4e:	8c e7       	ldi	r24, 0x7C	; 124
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_displayString>
					tick = 0;
    3a56:	10 92 5b 01 	sts	0x015B, r1
					while(tick < 3);
    3a5a:	80 91 5b 01 	lds	r24, 0x015B
    3a5e:	83 30       	cpi	r24, 0x03	; 3
    3a60:	e0 f3       	brcs	.-8      	; 0x3a5a <main+0x1ac2>
    3a62:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <main+0x9ba>

00003a66 <__vector_11>:
static volatile void((*g_Timer0_CallBackPtr)(void))=NULL_PTR;
static volatile void((*g_Timer1_CallBackPtr)(void))=NULL_PTR;
static volatile void((*g_Timer2_CallBackPtr)(void))=NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    3a66:	1f 92       	push	r1
    3a68:	0f 92       	push	r0
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	0f 92       	push	r0
    3a6e:	11 24       	eor	r1, r1
    3a70:	2f 93       	push	r18
    3a72:	3f 93       	push	r19
    3a74:	4f 93       	push	r20
    3a76:	5f 93       	push	r21
    3a78:	6f 93       	push	r22
    3a7a:	7f 93       	push	r23
    3a7c:	8f 93       	push	r24
    3a7e:	9f 93       	push	r25
    3a80:	af 93       	push	r26
    3a82:	bf 93       	push	r27
    3a84:	ef 93       	push	r30
    3a86:	ff 93       	push	r31
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_CallBackPtr!=NULL_PTR)
    3a90:	80 91 5f 01 	lds	r24, 0x015F
    3a94:	90 91 60 01 	lds	r25, 0x0160
    3a98:	00 97       	sbiw	r24, 0x00	; 0
    3a9a:	29 f0       	breq	.+10     	; 0x3aa6 <__vector_11+0x40>
	{
	(*g_Timer0_CallBackPtr)();
    3a9c:	e0 91 5f 01 	lds	r30, 0x015F
    3aa0:	f0 91 60 01 	lds	r31, 0x0160
    3aa4:	09 95       	icall
	}
}
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	ff 91       	pop	r31
    3aac:	ef 91       	pop	r30
    3aae:	bf 91       	pop	r27
    3ab0:	af 91       	pop	r26
    3ab2:	9f 91       	pop	r25
    3ab4:	8f 91       	pop	r24
    3ab6:	7f 91       	pop	r23
    3ab8:	6f 91       	pop	r22
    3aba:	5f 91       	pop	r21
    3abc:	4f 91       	pop	r20
    3abe:	3f 91       	pop	r19
    3ac0:	2f 91       	pop	r18
    3ac2:	0f 90       	pop	r0
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	0f 90       	pop	r0
    3ac8:	1f 90       	pop	r1
    3aca:	18 95       	reti

00003acc <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    3acc:	1f 92       	push	r1
    3ace:	0f 92       	push	r0
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	0f 92       	push	r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	2f 93       	push	r18
    3ad8:	3f 93       	push	r19
    3ada:	4f 93       	push	r20
    3adc:	5f 93       	push	r21
    3ade:	6f 93       	push	r22
    3ae0:	7f 93       	push	r23
    3ae2:	8f 93       	push	r24
    3ae4:	9f 93       	push	r25
    3ae6:	af 93       	push	r26
    3ae8:	bf 93       	push	r27
    3aea:	ef 93       	push	r30
    3aec:	ff 93       	push	r31
    3aee:	df 93       	push	r29
    3af0:	cf 93       	push	r28
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_CallBackPtr!=NULL_PTR)
    3af6:	80 91 5f 01 	lds	r24, 0x015F
    3afa:	90 91 60 01 	lds	r25, 0x0160
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	29 f0       	breq	.+10     	; 0x3b0c <__vector_10+0x40>
		{
		(*g_Timer0_CallBackPtr)();
    3b02:	e0 91 5f 01 	lds	r30, 0x015F
    3b06:	f0 91 60 01 	lds	r31, 0x0160
    3b0a:	09 95       	icall
		}
}
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	ff 91       	pop	r31
    3b12:	ef 91       	pop	r30
    3b14:	bf 91       	pop	r27
    3b16:	af 91       	pop	r26
    3b18:	9f 91       	pop	r25
    3b1a:	8f 91       	pop	r24
    3b1c:	7f 91       	pop	r23
    3b1e:	6f 91       	pop	r22
    3b20:	5f 91       	pop	r21
    3b22:	4f 91       	pop	r20
    3b24:	3f 91       	pop	r19
    3b26:	2f 91       	pop	r18
    3b28:	0f 90       	pop	r0
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	0f 90       	pop	r0
    3b2e:	1f 90       	pop	r1
    3b30:	18 95       	reti

00003b32 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3b32:	1f 92       	push	r1
    3b34:	0f 92       	push	r0
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	0f 92       	push	r0
    3b3a:	11 24       	eor	r1, r1
    3b3c:	2f 93       	push	r18
    3b3e:	3f 93       	push	r19
    3b40:	4f 93       	push	r20
    3b42:	5f 93       	push	r21
    3b44:	6f 93       	push	r22
    3b46:	7f 93       	push	r23
    3b48:	8f 93       	push	r24
    3b4a:	9f 93       	push	r25
    3b4c:	af 93       	push	r26
    3b4e:	bf 93       	push	r27
    3b50:	ef 93       	push	r30
    3b52:	ff 93       	push	r31
    3b54:	df 93       	push	r29
    3b56:	cf 93       	push	r28
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_CallBackPtr!=NULL_PTR)
    3b5c:	80 91 61 01 	lds	r24, 0x0161
    3b60:	90 91 62 01 	lds	r25, 0x0162
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	29 f0       	breq	.+10     	; 0x3b72 <__vector_9+0x40>
		{
		(*g_Timer1_CallBackPtr)();
    3b68:	e0 91 61 01 	lds	r30, 0x0161
    3b6c:	f0 91 62 01 	lds	r31, 0x0162
    3b70:	09 95       	icall
		}
}
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	ff 91       	pop	r31
    3b78:	ef 91       	pop	r30
    3b7a:	bf 91       	pop	r27
    3b7c:	af 91       	pop	r26
    3b7e:	9f 91       	pop	r25
    3b80:	8f 91       	pop	r24
    3b82:	7f 91       	pop	r23
    3b84:	6f 91       	pop	r22
    3b86:	5f 91       	pop	r21
    3b88:	4f 91       	pop	r20
    3b8a:	3f 91       	pop	r19
    3b8c:	2f 91       	pop	r18
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti

00003b98 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3b98:	1f 92       	push	r1
    3b9a:	0f 92       	push	r0
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	2f 93       	push	r18
    3ba4:	3f 93       	push	r19
    3ba6:	4f 93       	push	r20
    3ba8:	5f 93       	push	r21
    3baa:	6f 93       	push	r22
    3bac:	7f 93       	push	r23
    3bae:	8f 93       	push	r24
    3bb0:	9f 93       	push	r25
    3bb2:	af 93       	push	r26
    3bb4:	bf 93       	push	r27
    3bb6:	ef 93       	push	r30
    3bb8:	ff 93       	push	r31
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_CallBackPtr!=NULL_PTR)
    3bc2:	80 91 61 01 	lds	r24, 0x0161
    3bc6:	90 91 62 01 	lds	r25, 0x0162
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	29 f0       	breq	.+10     	; 0x3bd8 <__vector_7+0x40>
		{
		(*g_Timer1_CallBackPtr)();
    3bce:	e0 91 61 01 	lds	r30, 0x0161
    3bd2:	f0 91 62 01 	lds	r31, 0x0162
    3bd6:	09 95       	icall
		}
}
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	ff 91       	pop	r31
    3bde:	ef 91       	pop	r30
    3be0:	bf 91       	pop	r27
    3be2:	af 91       	pop	r26
    3be4:	9f 91       	pop	r25
    3be6:	8f 91       	pop	r24
    3be8:	7f 91       	pop	r23
    3bea:	6f 91       	pop	r22
    3bec:	5f 91       	pop	r21
    3bee:	4f 91       	pop	r20
    3bf0:	3f 91       	pop	r19
    3bf2:	2f 91       	pop	r18
    3bf4:	0f 90       	pop	r0
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	0f 90       	pop	r0
    3bfa:	1f 90       	pop	r1
    3bfc:	18 95       	reti

00003bfe <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    3bfe:	1f 92       	push	r1
    3c00:	0f 92       	push	r0
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	0f 92       	push	r0
    3c06:	11 24       	eor	r1, r1
    3c08:	2f 93       	push	r18
    3c0a:	3f 93       	push	r19
    3c0c:	4f 93       	push	r20
    3c0e:	5f 93       	push	r21
    3c10:	6f 93       	push	r22
    3c12:	7f 93       	push	r23
    3c14:	8f 93       	push	r24
    3c16:	9f 93       	push	r25
    3c18:	af 93       	push	r26
    3c1a:	bf 93       	push	r27
    3c1c:	ef 93       	push	r30
    3c1e:	ff 93       	push	r31
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_CallBackPtr!=NULL_PTR)
    3c28:	80 91 63 01 	lds	r24, 0x0163
    3c2c:	90 91 64 01 	lds	r25, 0x0164
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	29 f0       	breq	.+10     	; 0x3c3e <__vector_5+0x40>
		{
		(*g_Timer2_CallBackPtr)();
    3c34:	e0 91 63 01 	lds	r30, 0x0163
    3c38:	f0 91 64 01 	lds	r31, 0x0164
    3c3c:	09 95       	icall
		}
}
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	ff 91       	pop	r31
    3c44:	ef 91       	pop	r30
    3c46:	bf 91       	pop	r27
    3c48:	af 91       	pop	r26
    3c4a:	9f 91       	pop	r25
    3c4c:	8f 91       	pop	r24
    3c4e:	7f 91       	pop	r23
    3c50:	6f 91       	pop	r22
    3c52:	5f 91       	pop	r21
    3c54:	4f 91       	pop	r20
    3c56:	3f 91       	pop	r19
    3c58:	2f 91       	pop	r18
    3c5a:	0f 90       	pop	r0
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	0f 90       	pop	r0
    3c60:	1f 90       	pop	r1
    3c62:	18 95       	reti

00003c64 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    3c64:	1f 92       	push	r1
    3c66:	0f 92       	push	r0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	0f 92       	push	r0
    3c6c:	11 24       	eor	r1, r1
    3c6e:	2f 93       	push	r18
    3c70:	3f 93       	push	r19
    3c72:	4f 93       	push	r20
    3c74:	5f 93       	push	r21
    3c76:	6f 93       	push	r22
    3c78:	7f 93       	push	r23
    3c7a:	8f 93       	push	r24
    3c7c:	9f 93       	push	r25
    3c7e:	af 93       	push	r26
    3c80:	bf 93       	push	r27
    3c82:	ef 93       	push	r30
    3c84:	ff 93       	push	r31
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_CallBackPtr!=NULL_PTR)
    3c8e:	80 91 63 01 	lds	r24, 0x0163
    3c92:	90 91 64 01 	lds	r25, 0x0164
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	29 f0       	breq	.+10     	; 0x3ca4 <__vector_4+0x40>
		{
		(*g_Timer2_CallBackPtr)();
    3c9a:	e0 91 63 01 	lds	r30, 0x0163
    3c9e:	f0 91 64 01 	lds	r31, 0x0164
    3ca2:	09 95       	icall
		}
}
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	ff 91       	pop	r31
    3caa:	ef 91       	pop	r30
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <Timer_init>:
			}
		}
}
*/
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <Timer_init+0x6>
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <Timer_init+0x8>
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    3cda:	e9 81       	ldd	r30, Y+1	; 0x01
    3cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cde:	84 81       	ldd	r24, Z+4	; 0x04
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	3c 83       	std	Y+4, r19	; 0x04
    3ce6:	2b 83       	std	Y+3, r18	; 0x03
    3ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cea:	9c 81       	ldd	r25, Y+4	; 0x04
    3cec:	81 30       	cpi	r24, 0x01	; 1
    3cee:	91 05       	cpc	r25, r1
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <Timer_init+0x2a>
    3cf2:	48 c0       	rjmp	.+144    	; 0x3d84 <Timer_init+0xba>
    3cf4:	2b 81       	ldd	r18, Y+3	; 0x03
    3cf6:	3c 81       	ldd	r19, Y+4	; 0x04
    3cf8:	22 30       	cpi	r18, 0x02	; 2
    3cfa:	31 05       	cpc	r19, r1
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <Timer_init+0x36>
    3cfe:	83 c0       	rjmp	.+262    	; 0x3e06 <Timer_init+0x13c>
    3d00:	8b 81       	ldd	r24, Y+3	; 0x03
    3d02:	9c 81       	ldd	r25, Y+4	; 0x04
    3d04:	00 97       	sbiw	r24, 0x00	; 0
    3d06:	09 f0       	breq	.+2      	; 0x3d0a <Timer_init+0x40>
    3d08:	ba c0       	rjmp	.+372    	; 0x3e7e <Timer_init+0x1b4>
	{
	case TIMER0:

		/* FOC0 = 1 for non-PWM Modes */
		TCCR0 = (1 << FOC0);
    3d0a:	e3 e5       	ldi	r30, 0x53	; 83
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 e8       	ldi	r24, 0x80	; 128
    3d10:	80 83       	st	Z, r24

		/* Load the initial value to Timer0 counter */
		TCNT0 = (uint8)Config_Ptr->timer_InitialValue;
    3d12:	a2 e5       	ldi	r26, 0x52	; 82
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	e9 81       	ldd	r30, Y+1	; 0x01
    3d18:	fa 81       	ldd	r31, Y+2	; 0x02
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == NORMAL)
    3d20:	e9 81       	ldd	r30, Y+1	; 0x01
    3d22:	fa 81       	ldd	r31, Y+2	; 0x02
    3d24:	86 81       	ldd	r24, Z+6	; 0x06
    3d26:	88 23       	and	r24, r24
    3d28:	41 f4       	brne	.+16     	; 0x3d3a <Timer_init+0x70>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1 << TOIE0);
    3d2a:	a9 e5       	ldi	r26, 0x59	; 89
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	e9 e5       	ldi	r30, 0x59	; 89
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	81 60       	ori	r24, 0x01	; 1
    3d36:	8c 93       	st	X, r24
    3d38:	1a c0       	rjmp	.+52     	; 0x3d6e <Timer_init+0xa4>
		}
		else if(Config_Ptr->timer_mode ==CTC)
    3d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3e:	86 81       	ldd	r24, Z+6	; 0x06
    3d40:	81 30       	cpi	r24, 0x01	; 1
    3d42:	a9 f4       	brne	.+42     	; 0x3d6e <Timer_init+0xa4>
		{
			/* Setting Timer0 to CTC */
			TCCR0 |= (1 << WGM01);
    3d44:	a3 e5       	ldi	r26, 0x53	; 83
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	e3 e5       	ldi	r30, 0x53	; 83
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	88 60       	ori	r24, 0x08	; 8
    3d50:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1 << OCIE0);
    3d52:	a9 e5       	ldi	r26, 0x59	; 89
    3d54:	b0 e0       	ldi	r27, 0x00	; 0
    3d56:	e9 e5       	ldi	r30, 0x59	; 89
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
    3d5c:	82 60       	ori	r24, 0x02	; 2
    3d5e:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR0 = (uint8)Config_Ptr->timer_compare_MatchValue;
    3d60:	ac e5       	ldi	r26, 0x5C	; 92
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	e9 81       	ldd	r30, Y+1	; 0x01
    3d66:	fa 81       	ldd	r31, Y+2	; 0x02
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer0 */
		TCCR0 |= (Config_Ptr->timer_clock);
    3d6e:	a3 e5       	ldi	r26, 0x53	; 83
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	e3 e5       	ldi	r30, 0x53	; 83
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	90 81       	ld	r25, Z
    3d78:	e9 81       	ldd	r30, Y+1	; 0x01
    3d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d7c:	85 81       	ldd	r24, Z+5	; 0x05
    3d7e:	89 2b       	or	r24, r25
    3d80:	8c 93       	st	X, r24
    3d82:	7d c0       	rjmp	.+250    	; 0x3e7e <Timer_init+0x1b4>

		break;
	case TIMER1:

		/* FOC1A = 1, FOC1B = 1 for non-PWM Modes */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    3d84:	ef e4       	ldi	r30, 0x4F	; 79
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	8c e0       	ldi	r24, 0x0C	; 12
    3d8a:	80 83       	st	Z, r24
		TCCR1B = 0;
    3d8c:	ee e4       	ldi	r30, 0x4E	; 78
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	10 82       	st	Z, r1

		/* Load the initial value to Timer1 counter */
		TCNT1 = Config_Ptr->timer_InitialValue;
    3d92:	ac e4       	ldi	r26, 0x4C	; 76
    3d94:	b0 e0       	ldi	r27, 0x00	; 0
    3d96:	e9 81       	ldd	r30, Y+1	; 0x01
    3d98:	fa 81       	ldd	r31, Y+2	; 0x02
    3d9a:	80 81       	ld	r24, Z
    3d9c:	91 81       	ldd	r25, Z+1	; 0x01
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	9c 93       	st	X, r25
    3da2:	8e 93       	st	-X, r24

		if (Config_Ptr->timer_mode == NORMAL)
    3da4:	e9 81       	ldd	r30, Y+1	; 0x01
    3da6:	fa 81       	ldd	r31, Y+2	; 0x02
    3da8:	86 81       	ldd	r24, Z+6	; 0x06
    3daa:	88 23       	and	r24, r24
    3dac:	41 f4       	brne	.+16     	; 0x3dbe <Timer_init+0xf4>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1 << TOIE1);
    3dae:	a9 e5       	ldi	r26, 0x59	; 89
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	e9 e5       	ldi	r30, 0x59	; 89
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	84 60       	ori	r24, 0x04	; 4
    3dba:	8c 93       	st	X, r24
    3dbc:	19 c0       	rjmp	.+50     	; 0x3df0 <Timer_init+0x126>
		}
		else if(Config_Ptr->timer_mode == CTC)
    3dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc2:	86 81       	ldd	r24, Z+6	; 0x06
    3dc4:	81 30       	cpi	r24, 0x01	; 1
    3dc6:	a1 f4       	brne	.+40     	; 0x3df0 <Timer_init+0x126>
		{
			/* Setting CTC Mode */
			TCCR1B = (1 << WGM12);
    3dc8:	ee e4       	ldi	r30, 0x4E	; 78
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	88 e0       	ldi	r24, 0x08	; 8
    3dce:	80 83       	st	Z, r24

			/* Enable Timer1 Compare Interrupt */
			TIMSK |= (1 << OCIE1A);
    3dd0:	a9 e5       	ldi	r26, 0x59	; 89
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	e9 e5       	ldi	r30, 0x59	; 89
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	80 61       	ori	r24, 0x10	; 16
    3ddc:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    3dde:	aa e4       	ldi	r26, 0x4A	; 74
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	e9 81       	ldd	r30, Y+1	; 0x01
    3de4:	fa 81       	ldd	r31, Y+2	; 0x02
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	11 96       	adiw	r26, 0x01	; 1
    3dec:	9c 93       	st	X, r25
    3dee:	8e 93       	st	-X, r24
		{
			/* Do nothing */
		}

		/* Start Timer1 */
		TCCR1B |= (Config_Ptr->timer_clock);
    3df0:	ae e4       	ldi	r26, 0x4E	; 78
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	ee e4       	ldi	r30, 0x4E	; 78
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	90 81       	ld	r25, Z
    3dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dfe:	85 81       	ldd	r24, Z+5	; 0x05
    3e00:	89 2b       	or	r24, r25
    3e02:	8c 93       	st	X, r24
    3e04:	3c c0       	rjmp	.+120    	; 0x3e7e <Timer_init+0x1b4>

		break;
	case TIMER2:

		/* FOC2 = 1 for non-PWM Modes */
		TCCR2 = (1 << FOC2);
    3e06:	e5 e4       	ldi	r30, 0x45	; 69
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 e8       	ldi	r24, 0x80	; 128
    3e0c:	80 83       	st	Z, r24

		/* Load the initial value to Timer2 counter */
		TCNT2 = (uint8)Config_Ptr->timer_InitialValue;
    3e0e:	a4 e4       	ldi	r26, 0x44	; 68
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	e9 81       	ldd	r30, Y+1	; 0x01
    3e14:	fa 81       	ldd	r31, Y+2	; 0x02
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == NORMAL)
    3e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e20:	86 81       	ldd	r24, Z+6	; 0x06
    3e22:	88 23       	and	r24, r24
    3e24:	41 f4       	brne	.+16     	; 0x3e36 <Timer_init+0x16c>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1 << TOIE2);
    3e26:	a9 e5       	ldi	r26, 0x59	; 89
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	e9 e5       	ldi	r30, 0x59	; 89
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	80 64       	ori	r24, 0x40	; 64
    3e32:	8c 93       	st	X, r24
    3e34:	1a c0       	rjmp	.+52     	; 0x3e6a <Timer_init+0x1a0>
		}
		else if(Config_Ptr->timer_mode == CTC)
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	86 81       	ldd	r24, Z+6	; 0x06
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	a9 f4       	brne	.+42     	; 0x3e6a <Timer_init+0x1a0>
		{
			/* Setting Timer2 to CTC */
			TCCR2 |= (1 << WGM21);
    3e40:	a5 e4       	ldi	r26, 0x45	; 69
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	e5 e4       	ldi	r30, 0x45	; 69
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	88 60       	ori	r24, 0x08	; 8
    3e4c:	8c 93       	st	X, r24

			/* Enable Timer2 Compare Interrupt */
			TIMSK |= (1 << OCIE2);
    3e4e:	a9 e5       	ldi	r26, 0x59	; 89
    3e50:	b0 e0       	ldi	r27, 0x00	; 0
    3e52:	e9 e5       	ldi	r30, 0x59	; 89
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	80 81       	ld	r24, Z
    3e58:	80 68       	ori	r24, 0x80	; 128
    3e5a:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR2 = (uint8)Config_Ptr->timer_compare_MatchValue;
    3e5c:	a3 e4       	ldi	r26, 0x43	; 67
    3e5e:	b0 e0       	ldi	r27, 0x00	; 0
    3e60:	e9 81       	ldd	r30, Y+1	; 0x01
    3e62:	fa 81       	ldd	r31, Y+2	; 0x02
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer2 */
		TCCR2 |= (Config_Ptr->timer_clock);
    3e6a:	a5 e4       	ldi	r26, 0x45	; 69
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	e5 e4       	ldi	r30, 0x45	; 69
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	90 81       	ld	r25, Z
    3e74:	e9 81       	ldd	r30, Y+1	; 0x01
    3e76:	fa 81       	ldd	r31, Y+2	; 0x02
    3e78:	85 81       	ldd	r24, Z+5	; 0x05
    3e7a:	89 2b       	or	r24, r25
    3e7c:	8c 93       	st	X, r24

		break;
	}
}
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	0f 90       	pop	r0
    3e86:	cf 91       	pop	r28
    3e88:	df 91       	pop	r29
    3e8a:	08 95       	ret

00003e8c <Timer_deInit>:
		TCCR2&=0xF8;   /*CLOCK=0*/
	/*}
}
*/
void Timer_deInit(Timer_ID_Type timer_type)
{
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <Timer_deInit+0x6>
    3e92:	0f 92       	push	r0
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	89 83       	std	Y+1, r24	; 0x01
	/* Clear all registers contents and Disable Interrupts */
	switch(timer_type)
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	3b 83       	std	Y+3, r19	; 0x03
    3ea2:	2a 83       	std	Y+2, r18	; 0x02
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	91 05       	cpc	r25, r1
    3eac:	d1 f0       	breq	.+52     	; 0x3ee2 <Timer_deInit+0x56>
    3eae:	2a 81       	ldd	r18, Y+2	; 0x02
    3eb0:	3b 81       	ldd	r19, Y+3	; 0x03
    3eb2:	22 30       	cpi	r18, 0x02	; 2
    3eb4:	31 05       	cpc	r19, r1
    3eb6:	41 f1       	breq	.+80     	; 0x3f08 <Timer_deInit+0x7c>
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebc:	00 97       	sbiw	r24, 0x00	; 0
    3ebe:	a1 f5       	brne	.+104    	; 0x3f28 <Timer_deInit+0x9c>
	{
	case TIMER0:
		TCCR0 = 0;
    3ec0:	e3 e5       	ldi	r30, 0x53	; 83
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	10 82       	st	Z, r1
		TCNT0 = 0;
    3ec6:	e2 e5       	ldi	r30, 0x52	; 82
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	10 82       	st	Z, r1
		OCR0 = 0;
    3ecc:	ec e5       	ldi	r30, 0x5C	; 92
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    3ed2:	a9 e5       	ldi	r26, 0x59	; 89
    3ed4:	b0 e0       	ldi	r27, 0x00	; 0
    3ed6:	e9 e5       	ldi	r30, 0x59	; 89
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	80 81       	ld	r24, Z
    3edc:	8c 7f       	andi	r24, 0xFC	; 252
    3ede:	8c 93       	st	X, r24
    3ee0:	23 c0       	rjmp	.+70     	; 0x3f28 <Timer_deInit+0x9c>
		break;
	case TIMER1:
		TCCR1A = 0;
    3ee2:	ef e4       	ldi	r30, 0x4F	; 79
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	10 82       	st	Z, r1
		TCNT1 = 0;
    3ee8:	ec e4       	ldi	r30, 0x4C	; 76
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	11 82       	std	Z+1, r1	; 0x01
    3eee:	10 82       	st	Z, r1
		OCR1A = 0;
    3ef0:	ea e4       	ldi	r30, 0x4A	; 74
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	11 82       	std	Z+1, r1	; 0x01
    3ef6:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    3ef8:	a9 e5       	ldi	r26, 0x59	; 89
    3efa:	b0 e0       	ldi	r27, 0x00	; 0
    3efc:	e9 e5       	ldi	r30, 0x59	; 89
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	80 81       	ld	r24, Z
    3f02:	8b 7e       	andi	r24, 0xEB	; 235
    3f04:	8c 93       	st	X, r24
    3f06:	10 c0       	rjmp	.+32     	; 0x3f28 <Timer_deInit+0x9c>
		break;
	case TIMER2:
		TCCR2 = 0;
    3f08:	e5 e4       	ldi	r30, 0x45	; 69
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	10 82       	st	Z, r1
		TCNT2 = 0;
    3f0e:	e4 e4       	ldi	r30, 0x44	; 68
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	10 82       	st	Z, r1
		OCR2 = 0;
    3f14:	e3 e4       	ldi	r30, 0x43	; 67
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    3f1a:	a9 e5       	ldi	r26, 0x59	; 89
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	e9 e5       	ldi	r30, 0x59	; 89
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	80 81       	ld	r24, Z
    3f24:	8f 73       	andi	r24, 0x3F	; 63
    3f26:	8c 93       	st	X, r24
		break;
	}
}
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <Timer_setCallBack>:
       	g_Timer2_CallBackPtr=a_ptr;
       }
}
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <Timer_setCallBack+0x6>
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <Timer_setCallBack+0x8>
    3f3c:	0f 92       	push	r0
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
    3f46:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	3d 83       	std	Y+5, r19	; 0x05
    3f50:	2c 83       	std	Y+4, r18	; 0x04
    3f52:	8c 81       	ldd	r24, Y+4	; 0x04
    3f54:	9d 81       	ldd	r25, Y+5	; 0x05
    3f56:	81 30       	cpi	r24, 0x01	; 1
    3f58:	91 05       	cpc	r25, r1
    3f5a:	81 f0       	breq	.+32     	; 0x3f7c <Timer_setCallBack+0x48>
    3f5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f5e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f60:	22 30       	cpi	r18, 0x02	; 2
    3f62:	31 05       	cpc	r19, r1
    3f64:	91 f0       	breq	.+36     	; 0x3f8a <Timer_setCallBack+0x56>
    3f66:	8c 81       	ldd	r24, Y+4	; 0x04
    3f68:	9d 81       	ldd	r25, Y+5	; 0x05
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	a1 f4       	brne	.+40     	; 0x3f96 <Timer_setCallBack+0x62>
	{
	case TIMER0:
		g_Timer0_CallBackPtr= a_ptr;
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	9a 81       	ldd	r25, Y+2	; 0x02
    3f72:	90 93 60 01 	sts	0x0160, r25
    3f76:	80 93 5f 01 	sts	0x015F, r24
    3f7a:	0d c0       	rjmp	.+26     	; 0x3f96 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_Timer1_CallBackPtr = a_ptr;
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	90 93 62 01 	sts	0x0162, r25
    3f84:	80 93 61 01 	sts	0x0161, r24
    3f88:	06 c0       	rjmp	.+12     	; 0x3f96 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_Timer2_CallBackPtr = a_ptr;
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8e:	90 93 64 01 	sts	0x0164, r25
    3f92:	80 93 63 01 	sts	0x0163, r24
		break;
	}
}
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	08 95       	ret

00003fa6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType*Config_Ptr)
{
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <UART_init+0x6>
    3fac:	00 d0       	rcall	.+0      	; 0x3fae <UART_init+0x8>
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	9c 83       	std	Y+4, r25	; 0x04
    3fb4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3fb6:	1a 82       	std	Y+2, r1	; 0x02
    3fb8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3fba:	eb e2       	ldi	r30, 0x2B	; 43
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 for(5/6/7/8 -bit mode) =1 for (9 bit-mode)
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3fc2:	ea e2       	ldi	r30, 0x2A	; 42
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	88 e1       	ldi	r24, 0x18	; 24
    3fc8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit / 10 even parity/ 11 odd parity
	 * USBS    = 0/1 One OR two stop bits
	 * UCSZ1:0 = xx for n-bit data mode (00/5)(01/6)(10/7)(11/8 or 9)
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity<< UPM0)|\
    3fca:	a0 e4       	ldi	r26, 0x40	; 64
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	eb 81       	ldd	r30, Y+3	; 0x03
    3fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    3fd2:	81 81       	ldd	r24, Z+1	; 0x01
    3fd4:	88 2f       	mov	r24, r24
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	82 95       	swap	r24
    3fda:	92 95       	swap	r25
    3fdc:	90 7f       	andi	r25, 0xF0	; 240
    3fde:	98 27       	eor	r25, r24
    3fe0:	80 7f       	andi	r24, 0xF0	; 240
    3fe2:	98 27       	eor	r25, r24
    3fe4:	28 2f       	mov	r18, r24
    3fe6:	20 68       	ori	r18, 0x80	; 128
    3fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    3fea:	fc 81       	ldd	r31, Y+4	; 0x04
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	88 2f       	mov	r24, r24
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	88 0f       	add	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	28 2b       	or	r18, r24
    4000:	eb 81       	ldd	r30, Y+3	; 0x03
    4002:	fc 81       	ldd	r31, Y+4	; 0x04
    4004:	80 81       	ld	r24, Z
    4006:	88 2f       	mov	r24, r24
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	82 2b       	or	r24, r18
    4010:	8c 93       	st	X, r24
					             (Config_Ptr->stop_bit << USBS)|\
								 (Config_Ptr->bit_data << UCSZ0);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    4012:	eb 81       	ldd	r30, Y+3	; 0x03
    4014:	fc 81       	ldd	r31, Y+4	; 0x04
    4016:	83 81       	ldd	r24, Z+3	; 0x03
    4018:	94 81       	ldd	r25, Z+4	; 0x04
    401a:	a5 81       	ldd	r26, Z+5	; 0x05
    401c:	b6 81       	ldd	r27, Z+6	; 0x06
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	aa 1f       	adc	r26, r26
    4024:	bb 1f       	adc	r27, r27
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	aa 1f       	adc	r26, r26
    402c:	bb 1f       	adc	r27, r27
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	aa 1f       	adc	r26, r26
    4034:	bb 1f       	adc	r27, r27
    4036:	9c 01       	movw	r18, r24
    4038:	ad 01       	movw	r20, r26
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	92 e1       	ldi	r25, 0x12	; 18
    403e:	aa e7       	ldi	r26, 0x7A	; 122
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	0e 94 ce 20 	call	0x419c	; 0x419c <__udivmodsi4>
    404a:	da 01       	movw	r26, r20
    404c:	c9 01       	movw	r24, r18
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	9a 83       	std	Y+2, r25	; 0x02
    4052:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    4054:	e0 e4       	ldi	r30, 0x40	; 64
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	9a 81       	ldd	r25, Y+2	; 0x02
    405c:	89 2f       	mov	r24, r25
    405e:	99 27       	eor	r25, r25
    4060:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    4062:	e9 e2       	ldi	r30, 0x29	; 41
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	80 83       	st	Z, r24
}
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	0f 92       	push	r0
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4084:	eb e2       	ldi	r30, 0x2B	; 43
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	88 2f       	mov	r24, r24
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	80 72       	andi	r24, 0x20	; 32
    4090:	90 70       	andi	r25, 0x00	; 0
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	b9 f3       	breq	.-18     	; 0x4084 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4096:	ec e2       	ldi	r30, 0x2C	; 44
    4098:	f0 e0       	ldi	r31, 0x00	; 0
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    409e:	0f 90       	pop	r0
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    40ae:	eb e2       	ldi	r30, 0x2B	; 43
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	88 23       	and	r24, r24
    40b6:	dc f7       	brge	.-10     	; 0x40ae <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    40b8:	ec e2       	ldi	r30, 0x2C	; 44
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
}
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	08 95       	ret

000040c4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	00 d0       	rcall	.+0      	; 0x40ca <UART_sendString+0x6>
    40ca:	0f 92       	push	r0
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	9b 83       	std	Y+3, r25	; 0x03
    40d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    40d4:	19 82       	std	Y+1, r1	; 0x01
    40d6:	0e c0       	rjmp	.+28     	; 0x40f4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	28 2f       	mov	r18, r24
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	8a 81       	ldd	r24, Y+2	; 0x02
    40e0:	9b 81       	ldd	r25, Y+3	; 0x03
    40e2:	fc 01       	movw	r30, r24
    40e4:	e2 0f       	add	r30, r18
    40e6:	f3 1f       	adc	r31, r19
    40e8:	80 81       	ld	r24, Z
    40ea:	0e 94 3c 20 	call	0x4078	; 0x4078 <UART_sendByte>
		i++;
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	8f 5f       	subi	r24, 0xFF	; 255
    40f2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	28 2f       	mov	r18, r24
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	8a 81       	ldd	r24, Y+2	; 0x02
    40fc:	9b 81       	ldd	r25, Y+3	; 0x03
    40fe:	fc 01       	movw	r30, r24
    4100:	e2 0f       	add	r30, r18
    4102:	f3 1f       	adc	r31, r19
    4104:	80 81       	ld	r24, Z
    4106:	88 23       	and	r24, r24
    4108:	39 f7       	brne	.-50     	; 0x40d8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	08 95       	ret

00004116 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4116:	0f 93       	push	r16
    4118:	1f 93       	push	r17
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	00 d0       	rcall	.+0      	; 0x4120 <UART_receiveString+0xa>
    4120:	0f 92       	push	r0
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	9b 83       	std	Y+3, r25	; 0x03
    4128:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    412a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	28 2f       	mov	r18, r24
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	9b 81       	ldd	r25, Y+3	; 0x03
    4136:	8c 01       	movw	r16, r24
    4138:	02 0f       	add	r16, r18
    413a:	13 1f       	adc	r17, r19
    413c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    4140:	f8 01       	movw	r30, r16
    4142:	80 83       	st	Z, r24
    4144:	0f c0       	rjmp	.+30     	; 0x4164 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	8f 5f       	subi	r24, 0xFF	; 255
    414a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	28 2f       	mov	r18, r24
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	9b 81       	ldd	r25, Y+3	; 0x03
    4156:	8c 01       	movw	r16, r24
    4158:	02 0f       	add	r16, r18
    415a:	13 1f       	adc	r17, r19
    415c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <UART_receiveByte>
    4160:	f8 01       	movw	r30, r16
    4162:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	28 2f       	mov	r18, r24
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	8a 81       	ldd	r24, Y+2	; 0x02
    416c:	9b 81       	ldd	r25, Y+3	; 0x03
    416e:	fc 01       	movw	r30, r24
    4170:	e2 0f       	add	r30, r18
    4172:	f3 1f       	adc	r31, r19
    4174:	80 81       	ld	r24, Z
    4176:	83 32       	cpi	r24, 0x23	; 35
    4178:	31 f7       	brne	.-52     	; 0x4146 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    417a:	89 81       	ldd	r24, Y+1	; 0x01
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	8a 81       	ldd	r24, Y+2	; 0x02
    4182:	9b 81       	ldd	r25, Y+3	; 0x03
    4184:	fc 01       	movw	r30, r24
    4186:	e2 0f       	add	r30, r18
    4188:	f3 1f       	adc	r31, r19
    418a:	10 82       	st	Z, r1
}
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	cf 91       	pop	r28
    4194:	df 91       	pop	r29
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	08 95       	ret

0000419c <__udivmodsi4>:
    419c:	a1 e2       	ldi	r26, 0x21	; 33
    419e:	1a 2e       	mov	r1, r26
    41a0:	aa 1b       	sub	r26, r26
    41a2:	bb 1b       	sub	r27, r27
    41a4:	fd 01       	movw	r30, r26
    41a6:	0d c0       	rjmp	.+26     	; 0x41c2 <__udivmodsi4_ep>

000041a8 <__udivmodsi4_loop>:
    41a8:	aa 1f       	adc	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	ee 1f       	adc	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	a2 17       	cp	r26, r18
    41b2:	b3 07       	cpc	r27, r19
    41b4:	e4 07       	cpc	r30, r20
    41b6:	f5 07       	cpc	r31, r21
    41b8:	20 f0       	brcs	.+8      	; 0x41c2 <__udivmodsi4_ep>
    41ba:	a2 1b       	sub	r26, r18
    41bc:	b3 0b       	sbc	r27, r19
    41be:	e4 0b       	sbc	r30, r20
    41c0:	f5 0b       	sbc	r31, r21

000041c2 <__udivmodsi4_ep>:
    41c2:	66 1f       	adc	r22, r22
    41c4:	77 1f       	adc	r23, r23
    41c6:	88 1f       	adc	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	1a 94       	dec	r1
    41cc:	69 f7       	brne	.-38     	; 0x41a8 <__udivmodsi4_loop>
    41ce:	60 95       	com	r22
    41d0:	70 95       	com	r23
    41d2:	80 95       	com	r24
    41d4:	90 95       	com	r25
    41d6:	9b 01       	movw	r18, r22
    41d8:	ac 01       	movw	r20, r24
    41da:	bd 01       	movw	r22, r26
    41dc:	cf 01       	movw	r24, r30
    41de:	08 95       	ret

000041e0 <__prologue_saves__>:
    41e0:	2f 92       	push	r2
    41e2:	3f 92       	push	r3
    41e4:	4f 92       	push	r4
    41e6:	5f 92       	push	r5
    41e8:	6f 92       	push	r6
    41ea:	7f 92       	push	r7
    41ec:	8f 92       	push	r8
    41ee:	9f 92       	push	r9
    41f0:	af 92       	push	r10
    41f2:	bf 92       	push	r11
    41f4:	cf 92       	push	r12
    41f6:	df 92       	push	r13
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	ca 1b       	sub	r28, r26
    420a:	db 0b       	sbc	r29, r27
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	09 94       	ijmp

00004218 <__epilogue_restores__>:
    4218:	2a 88       	ldd	r2, Y+18	; 0x12
    421a:	39 88       	ldd	r3, Y+17	; 0x11
    421c:	48 88       	ldd	r4, Y+16	; 0x10
    421e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4220:	6e 84       	ldd	r6, Y+14	; 0x0e
    4222:	7d 84       	ldd	r7, Y+13	; 0x0d
    4224:	8c 84       	ldd	r8, Y+12	; 0x0c
    4226:	9b 84       	ldd	r9, Y+11	; 0x0b
    4228:	aa 84       	ldd	r10, Y+10	; 0x0a
    422a:	b9 84       	ldd	r11, Y+9	; 0x09
    422c:	c8 84       	ldd	r12, Y+8	; 0x08
    422e:	df 80       	ldd	r13, Y+7	; 0x07
    4230:	ee 80       	ldd	r14, Y+6	; 0x06
    4232:	fd 80       	ldd	r15, Y+5	; 0x05
    4234:	0c 81       	ldd	r16, Y+4	; 0x04
    4236:	1b 81       	ldd	r17, Y+3	; 0x03
    4238:	aa 81       	ldd	r26, Y+2	; 0x02
    423a:	b9 81       	ldd	r27, Y+1	; 0x01
    423c:	ce 0f       	add	r28, r30
    423e:	d1 1d       	adc	r29, r1
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	ed 01       	movw	r28, r26
    424c:	08 95       	ret

0000424e <itoa>:
    424e:	fb 01       	movw	r30, r22
    4250:	9f 01       	movw	r18, r30
    4252:	e8 94       	clt
    4254:	42 30       	cpi	r20, 0x02	; 2
    4256:	c4 f0       	brlt	.+48     	; 0x4288 <itoa+0x3a>
    4258:	45 32       	cpi	r20, 0x25	; 37
    425a:	b4 f4       	brge	.+44     	; 0x4288 <itoa+0x3a>
    425c:	4a 30       	cpi	r20, 0x0A	; 10
    425e:	29 f4       	brne	.+10     	; 0x426a <itoa+0x1c>
    4260:	97 fb       	bst	r25, 7
    4262:	1e f4       	brtc	.+6      	; 0x426a <itoa+0x1c>
    4264:	90 95       	com	r25
    4266:	81 95       	neg	r24
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	64 2f       	mov	r22, r20
    426c:	77 27       	eor	r23, r23
    426e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__udivmodhi4>
    4272:	80 5d       	subi	r24, 0xD0	; 208
    4274:	8a 33       	cpi	r24, 0x3A	; 58
    4276:	0c f0       	brlt	.+2      	; 0x427a <itoa+0x2c>
    4278:	89 5d       	subi	r24, 0xD9	; 217
    427a:	81 93       	st	Z+, r24
    427c:	cb 01       	movw	r24, r22
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	a1 f7       	brne	.-24     	; 0x426a <itoa+0x1c>
    4282:	16 f4       	brtc	.+4      	; 0x4288 <itoa+0x3a>
    4284:	5d e2       	ldi	r21, 0x2D	; 45
    4286:	51 93       	st	Z+, r21
    4288:	10 82       	st	Z, r1
    428a:	c9 01       	movw	r24, r18
    428c:	0c 94 48 21 	jmp	0x4290	; 0x4290 <strrev>

00004290 <strrev>:
    4290:	dc 01       	movw	r26, r24
    4292:	fc 01       	movw	r30, r24
    4294:	67 2f       	mov	r22, r23
    4296:	71 91       	ld	r23, Z+
    4298:	77 23       	and	r23, r23
    429a:	e1 f7       	brne	.-8      	; 0x4294 <strrev+0x4>
    429c:	32 97       	sbiw	r30, 0x02	; 2
    429e:	04 c0       	rjmp	.+8      	; 0x42a8 <strrev+0x18>
    42a0:	7c 91       	ld	r23, X
    42a2:	6d 93       	st	X+, r22
    42a4:	70 83       	st	Z, r23
    42a6:	62 91       	ld	r22, -Z
    42a8:	ae 17       	cp	r26, r30
    42aa:	bf 07       	cpc	r27, r31
    42ac:	c8 f3       	brcs	.-14     	; 0x42a0 <strrev+0x10>
    42ae:	08 95       	ret

000042b0 <__udivmodhi4>:
    42b0:	aa 1b       	sub	r26, r26
    42b2:	bb 1b       	sub	r27, r27
    42b4:	51 e1       	ldi	r21, 0x11	; 17
    42b6:	07 c0       	rjmp	.+14     	; 0x42c6 <__udivmodhi4_ep>

000042b8 <__udivmodhi4_loop>:
    42b8:	aa 1f       	adc	r26, r26
    42ba:	bb 1f       	adc	r27, r27
    42bc:	a6 17       	cp	r26, r22
    42be:	b7 07       	cpc	r27, r23
    42c0:	10 f0       	brcs	.+4      	; 0x42c6 <__udivmodhi4_ep>
    42c2:	a6 1b       	sub	r26, r22
    42c4:	b7 0b       	sbc	r27, r23

000042c6 <__udivmodhi4_ep>:
    42c6:	88 1f       	adc	r24, r24
    42c8:	99 1f       	adc	r25, r25
    42ca:	5a 95       	dec	r21
    42cc:	a9 f7       	brne	.-22     	; 0x42b8 <__udivmodhi4_loop>
    42ce:	80 95       	com	r24
    42d0:	90 95       	com	r25
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	08 95       	ret

000042d8 <_exit>:
    42d8:	f8 94       	cli

000042da <__stop_program>:
    42da:	ff cf       	rjmp	.-2      	; 0x42da <__stop_program>
